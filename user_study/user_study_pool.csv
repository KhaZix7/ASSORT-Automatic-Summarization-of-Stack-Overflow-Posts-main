answer_id,original_post,assort_s,assort_is,baseline
100146,"A metaclass is the class of a class. Like a class defines how an instance of the class behaves, a metaclass defines how a class behaves. A class is an instance of a metaclass. While in Python you can use arbitrary callables for metaclasses (like Jerub shows), the more useful approach is actually to make it an actual class itself. type is the usual metaclass in Python. In case you're wondering, yes, type is itself a class, and it is its own type. You won't be able to recreate something like type purely in Python, but Python cheats a little. To create your own metaclass in Python you really just want to subclass type. A metaclass is most commonly used as a class-factory. Like you create an instance of the class by calling the class, Python creates a new class (when it executes the 'class' statement) by calling the metaclass. Combined with the normal __init__ and __new__ methods, metaclasses therefore allow you to do 'extra things' when creating a class, like registering the new class with some registry, or even replace the class with something else entirely. When the class statement is executed, Python first executes the body of the class statement as a normal block of code. The resulting namespace (a dict) holds the attributes of the class-to-be. The metaclass is determined by looking at the baseclasses of the class-to-be (metaclasses are inherited), at the __metaclass__ attribute of the class-to-be (if any) or the __metaclass__ global variable. The metaclass is then called with the name, bases and attributes of the class to instantiate it. However, metaclasses actually define the type of a class, not just a factory for it, so you can do much more with them. You can, for instance, define normal methods on the metaclass. These metaclass-methods are like classmethods, in that they can be called on the class without an instance, but they are also not like classmethods in that they cannot be called on an instance of the class. type.__subclasses__() is an example of a method on the type metaclass. You can also define the normal 'magic' methods, like __add__, __iter__ and __getattr__, to implement or change how the class behaves. Here's an aggregated example of the bits and pieces: ","A metaclass is the class of a class. Like a class defines how an instance of the class behaves, a metaclass defines how a class behaves. A class is an instance of a metaclass. type is the usual metaclass in Python. To create your own metaclass in Python you really just want to subclass type. The metaclass is determined by looking at the baseclasses of the class-to-be (metaclasses are inherited), at the __metaclass__ attribute of the class-to-be (if any) or the __metaclass__ global variable. ","A metaclass is the class of a class. Like a class defines how an instance of the class behaves, a metaclass defines how a class behaves. A class is an instance of a metaclass. To create your own metaclass in Python you really just want to subclass type. When the class statement is executed, Python first executes the body of the class statement as a normal block of code. The metaclass is determined by looking at the baseclasses of the class-to-be (metaclasses are inherited), at the __metaclass__ attribute of the class-to-be (if any) or the __metaclass__ global variable. The metaclass is then called with the name, bases and attributes of the class to instantiate it. You can, for instance, define normal methods on the metaclass. ","A metaclass is the class of a class. Like a class defines how an instance of the class behaves, a metaclass defines how a class behaves. A class is an instance of a metaclass. type is the usual metaclass in Python. To create your own metaclass in Python you really just want to subclass type. Like you create an instance of the class by calling the class, Python creates a new class (when it executes the 'class' statement) by calling the metaclass. The resulting namespace (a dict) holds the attributes of the class-to-be. The metaclass is determined by looking at the baseclasses of the class-to-be (metaclasses are inherited), at the __metaclass__ attribute of the class-to-be (if any) or the __metaclass__ global variable. Here's an aggregated example of the bits and pieces: "
101276,"Main messages :) De-cyphered: The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than right now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those! ","Main messages :) The Zen of Python, by Tim Peters ","Main messages :) The Zen of Python, by Tim Peters Complex is better than complicated. Sparse is better than dense. ","The Zen of Python, by Tim Peters Sparse is better than dense. Unless explicitly silenced. Now is better than never. If the implementation is hard to explain, it's a bad idea. "
1041880,"extern ""C"" makes a function-name in C++ have 'C' linkage (compiler does not mangle the name) so that client C code can link to (i.e use) your function using a 'C' compatible header file that contains just the declaration of your function. Your function definition is contained in a binary format (that was compiled by your C++ compiler) that the client 'C' linker will then link to using the 'C' name. Since C++ has overloading of function names and C does not, the C++ compiler cannot just use the function name as a unique id to link to, so it mangles the name by adding information about the arguments. A C compiler does not need to mangle the name since you can not overload function names in C.  When you state that a function has extern ""C"" linkage in C++, the C++ compiler does not add argument/parameter type information to the name used for linkage. Just so you know, you can specify ""C"" linkage to each individual declaration/definition explicitly or use a block to group a sequence of declarations/definitions to have a certain linkage: If you care about the technicalities, they are listed in section 7.5 of the C++03 standard, here is a brief summary (with emphasis on extern ""C""): extern ""C"" is a linkage-specification Every compiler is required to provide ""C"" linkage a linkage specification shall occur only in namespace scope  all function types, function names and variable names have a language linkage  See Richard's Comment: Only function names and variable names with external linkage have a language linkage two function types with distinct language linkages are distinct types even if otherwise identical linkage specs nest, inner one determines the final linkage extern ""C"" is ignored for class members at most one function with a particular name can have ""C"" linkage (regardless of namespace)  extern ""C"" forces a function to have external linkage (cannot make it static)   See Richard's comment:    'static' inside 'extern ""C""' is valid; an entity so declared has internal linkage, and so does not have a language linkage Linkage from C++ to objects defined in other languages and to objects defined in C++ from other languages is implementation-defined and language-dependent. Only where the object layout strategies of two language implementations are similar enough can such linkage be achieved ","extern ""C"" makes a function-name in C++ have 'C' linkage (compiler does not mangle the name) so that client C code can link to (i.e use) your function using a 'C' compatible header file that contains just the declaration of your function. Since C++ has overloading of function names and C does not, the C++ compiler cannot just use the function name as a unique id to link to, so it mangles the name by adding information about the arguments. Just so you know, you can specify ""C"" linkage to each individual declaration/definition explicitly or use a block to group a sequence of declarations/definitions to have a certain linkage: If you care about the technicalities, they are listed in section 7.5 of the C++03 standard, here is a brief summary (with emphasis on extern ""C""): extern ""C"" is a linkage-specification Every compiler is required to provide ""C"" linkage a linkage specification shall occur only in namespace scope  all function types, function names and variable names have a language linkage  See Richard's Comment: Only function names and variable names with external linkage have a language linkage two function types with distinct language linkages are distinct types even if otherwise identical linkage specs nest, inner one determines the final linkage extern ""C"" is ignored for class members at most one function with a particular name can have ""C"" linkage (regardless of namespace)  extern ""C"" forces a function to have external linkage (cannot make it static)   See Richard's comment:    'static' inside 'extern ""C""' is valid; an entity so declared has internal linkage, and so does not have a language linkage Linkage from C++ to objects defined in other languages and to objects defined in C++ from other languages is implementation-defined and language-dependent. ","extern ""C"" makes a function-name in C++ have 'C' linkage (compiler does not mangle the name) so that client C code can link to (i.e use) your function using a 'C' compatible header file that contains just the declaration of your function. Your function definition is contained in a binary format (that was compiled by your C++ compiler) that the client 'C' linker will then link to using the 'C' name. Since C++ has overloading of function names and C does not, the C++ compiler cannot just use the function name as a unique id to link to, so it mangles the name by adding information about the arguments. Just so you know, you can specify ""C"" linkage to each individual declaration/definition explicitly or use a block to group a sequence of declarations/definitions to have a certain linkage: If you care about the technicalities, they are listed in section 7.5 of the C++03 standard, here is a brief summary (with emphasis on extern ""C""): extern ""C"" is a linkage-specification Every compiler is required to provide ""C"" linkage a linkage specification shall occur only in namespace scope  all function types, function names and variable names have a language linkage  See Richard's Comment: Only function names and variable names with external linkage have a language linkage two function types with distinct language linkages are distinct types even if otherwise identical linkage specs nest, inner one determines the final linkage extern ""C"" is ignored for class members at most one function with a particular name can have ""C"" linkage (regardless of namespace)  extern ""C"" forces a function to have external linkage (cannot make it static)   See Richard's comment:    'static' inside 'extern ""C""' is valid; an entity so declared has internal linkage, and so does not have a language linkage Linkage from C++ to objects defined in other languages and to objects defined in C++ from other languages is implementation-defined and language-dependent. Only where the object layout strategies of two language implementations are similar enough can such linkage be achieved ","extern ""C"" makes a function-name in C++ have 'C' linkage (compiler does not mangle the name) so that client C code can link to (i.e use) your function using a 'C' compatible header file that contains just the declaration of your function. Your function definition is contained in a binary format (that was compiled by your C++ compiler) that the client 'C' linker will then link to using the 'C' name. Since C++ has overloading of function names and C does not, the C++ compiler cannot just use the function name as a unique id to link to, so it mangles the name by adding information about the arguments. A C compiler does not need to mangle the name since you can not overload function names in C.  When you state that a function has extern ""C"" linkage in C++, the C++ compiler does not add argument/parameter type information to the name used for linkage. Just so you know, you can specify ""C"" linkage to each individual declaration/definition explicitly or use a block to group a sequence of declarations/definitions to have a certain linkage: If you care about the technicalities, they are listed in section 7.5 of the C++03 standard, here is a brief summary (with emphasis on extern ""C""): extern ""C"" is a linkage-specification Every compiler is required to provide ""C"" linkage a linkage specification shall occur only in namespace scope  all function types, function names and variable names have a language linkage  See Richard's Comment: Only function names and variable names with external linkage have a language linkage two function types with distinct language linkages are distinct types even if otherwise identical linkage specs nest, inner one determines the final linkage extern ""C"" is ignored for class members at most one function with a particular name can have ""C"" linkage (regardless of namespace)  extern ""C"" forces a function to have external linkage (cannot make it static)   See Richard's comment:    'static' inside 'extern ""C""' is valid; an entity so declared has internal linkage, and so does not have a language linkage Linkage from C++ to objects defined in other languages and to objects defined in C++ from other languages is implementation-defined and language-dependent. Only where the object layout strategies of two language implementations are similar enough can such linkage be achieved "
1207373,"Update: 2017-01-10 Data URIs are now supported by all major browsers. IE supports embedding images since version 8 as well. http://caniuse.com/#feat=datauri Data URIs are now supported by the following web browsers: Gecko-based, such as Firefox, SeaMonkey, XeroBank, Camino, Fennec and K-Meleon Konqueror, via KDE's KIO slaves input/output system Opera (including devices such as the Nintendo DSi or Wii) WebKit-based, such as Safari (including on iOS), Android's browser, Epiphany and Midori (WebKit is a derivative of Konqueror's KHTML engine, but Mac OS X does not share the KIO architecture so the implementations are different), as well as Webkit/Chromium-based, such as Chrome Trident      Internet Explorer 8: Microsoft has limited its support to certain ""non-navigable"" content for security reasons, including concerns that JavaScript embedded in a data URI may not be interpretable by script filters such as those used by web-based email clients. Data URIs must be smaller than 32 KiB in Version 8[3]. Data URIs are supported only for the following elements and/or attributes[4]:      object (images only) img input type=image link CSS declarations that accept a URL, such as background-image, background, list-style-type, list-style and similar. Internet Explorer 9: Internet Explorer 9 does not have 32KiB limitation and allowed in broader elements. TheWorld Browser: An IE shell browser which has a built-in support for Data URI scheme http://en.wikipedia.org/wiki/Data_URI_scheme#Web_browser_support ","Data URIs are now supported by the following web browsers: Gecko-based, such as Firefox, SeaMonkey, XeroBank, Camino, Fennec and K-Meleon Konqueror, via KDE's KIO slaves input/output system Opera (including devices such as the Nintendo DSi or Wii) WebKit-based, such as Safari (including on iOS), Android's browser, Epiphany and Midori (WebKit is a derivative of Konqueror's KHTML engine, but Mac OS X does not share the KIO architecture so the implementations are different), as well as Webkit/Chromium-based, such as Chrome Trident      Internet Explorer 8: Microsoft has limited its support to certain ""non-navigable"" content for security reasons, including concerns that JavaScript embedded in a data URI may not be interpretable by script filters such as those used by web-based email clients. Data URIs must be smaller than 32 KiB in Version 8[3]. Data URIs are supported only for the following elements and/or attributes[4]:      object (images only) img input type=image link CSS declarations that accept a URL, such as background-image, background, list-style-type, list-style and similar. Internet Explorer 9: Internet Explorer 9 does not have 32KiB limitation and allowed in broader elements. TheWorld Browser: An IE shell browser which has a built-in support for Data URI scheme http://en.wikipedia.org/wiki/Data_URI_scheme#Web_browser_support ","Data URIs are now supported by all major browsers. IE supports embedding images since version 8 as well. Data URIs are now supported by the following web browsers: Gecko-based, such as Firefox, SeaMonkey, XeroBank, Camino, Fennec and K-Meleon Konqueror, via KDE's KIO slaves input/output system Opera (including devices such as the Nintendo DSi or Wii) WebKit-based, such as Safari (including on iOS), Android's browser, Epiphany and Midori (WebKit is a derivative of Konqueror's KHTML engine, but Mac OS X does not share the KIO architecture so the implementations are different), as well as Webkit/Chromium-based, such as Chrome Trident      Internet Explorer 8: Microsoft has limited its support to certain ""non-navigable"" content for security reasons, including concerns that JavaScript embedded in a data URI may not be interpretable by script filters such as those used by web-based email clients. Data URIs must be smaller than 32 KiB in Version 8[3]. Data URIs are supported only for the following elements and/or attributes[4]:      object (images only) img input type=image link CSS declarations that accept a URL, such as background-image, background, list-style-type, list-style and similar. Internet Explorer 9: Internet Explorer 9 does not have 32KiB limitation and allowed in broader elements. TheWorld Browser: An IE shell browser which has a built-in support for Data URI scheme http://en.wikipedia.org/wiki/Data_URI_scheme#Web_browser_support ","Data URIs are now supported by all major browsers. IE supports embedding images since version 8 as well. http://caniuse.com/#feat=datauri Data URIs are now supported by the following web browsers: Gecko-based, such as Firefox, SeaMonkey, XeroBank, Camino, Fennec and K-Meleon Konqueror, via KDE's KIO slaves input/output system Opera (including devices such as the Nintendo DSi or Wii) WebKit-based, such as Safari (including on iOS), Android's browser, Epiphany and Midori (WebKit is a derivative of Konqueror's KHTML engine, but Mac OS X does not share the KIO architecture so the implementations are different), as well as Webkit/Chromium-based, such as Chrome Trident      Internet Explorer 8: Microsoft has limited its support to certain ""non-navigable"" content for security reasons, including concerns that JavaScript embedded in a data URI may not be interpretable by script filters such as those used by web-based email clients. Data URIs must be smaller than 32 KiB in Version 8[3]. Data URIs are supported only for the following elements and/or attributes[4]:      object (images only) img input type=image link CSS declarations that accept a URL, such as background-image, background, list-style-type, list-style and similar. Internet Explorer 9: Internet Explorer 9 does not have 32KiB limitation and allowed in broader elements. TheWorld Browser: An IE shell browser which has a built-in support for Data URI scheme http://en.wikipedia.org/wiki/Data_URI_scheme#Web_browser_support "
1669524,"Maybe a bit of example code will help: Notice the difference in the call signatures of foo, class_foo and static_foo: Below is the usual way an object instance calls a method. The object instance, a, is implicitly passed as the first argument. With classmethods, the class of the object instance is implicitly passed as the first argument instead of self. You can also call class_foo using the class. In fact, if you define something to bea classmethod, it is probably because you intend to call it from the class rather than from a class instance. A.foo(1) would have raised a TypeError, but A.class_foo(1) works just fine: One use people have found for class methods is to create inheritable alternative constructors. With staticmethods, neither self (the object instance) nor  cls (the class) is implicitly passed as the first argument. They behave like plain functions except that you can call them from an instance or the class: Staticmethods are used to group functions which have some logical connection with a class to the class. foo is just a function, but when you call a.foo you don't just get the function,you get a ""partially applied"" version of the function with the object instance a bound as the first argument to the function. foo expects 2 arguments, while a.foo only expects 1 argument. a is bound to foo. That is what is meant by the term ""bound"" below: With a.class_foo, a is not bound to class_foo, rather the class A is bound to class_foo. Here, with a staticmethod, even though it is a method, a.static_foo just returnsa good 'ole function with no arguments bound. static_foo expects 1 argument, anda.static_foo expects 1 argument too. And of course the same thing happens when you call static_foo with the class A instead. ","Below is the usual way an object instance calls a method. The object instance, a, is implicitly passed as the first argument. With classmethods, the class of the object instance is implicitly passed as the first argument instead of self. One use people have found for class methods is to create inheritable alternative constructors. With staticmethods, neither self (the object instance) nor  cls (the class) is implicitly passed as the first argument. They behave like plain functions except that you can call them from an instance or the class: Staticmethods are used to group functions which have some logical connection with a class to the class. And of course the same thing happens when you call static_foo with the class A instead. ","Below is the usual way an object instance calls a method. The object instance, a, is implicitly passed as the first argument. With classmethods, the class of the object instance is implicitly passed as the first argument instead of self. One use people have found for class methods is to create inheritable alternative constructors. With staticmethods, neither self (the object instance) nor  cls (the class) is implicitly passed as the first argument. They behave like plain functions except that you can call them from an instance or the class: Staticmethods are used to group functions which have some logical connection with a class to the class. That is what is meant by the term ""bound"" below: static_foo expects 1 argument, anda.static_foo expects 1 argument too. And of course the same thing happens when you call static_foo with the class A instead. ","Below is the usual way an object instance calls a method. The object instance, a, is implicitly passed as the first argument. With classmethods, the class of the object instance is implicitly passed as the first argument instead of self. One use people have found for class methods is to create inheritable alternative constructors. With staticmethods, neither self (the object instance) nor  cls (the class) is implicitly passed as the first argument. They behave like plain functions except that you can call them from an instance or the class: Staticmethods are used to group functions which have some logical connection with a class to the class. foo expects 2 arguments, while a.foo only expects 1 argument. With a.class_foo, a is not bound to class_foo, rather the class A is bound to class_foo. static_foo expects 1 argument, anda.static_foo expects 1 argument too. And of course the same thing happens when you call static_foo with the class A instead. "
1669579,"Official python docs: @classmethod A class method receives the class as  implicit first argument, just like an  instance method receives the instance. To declare a class method, use this  idiom: The @classmethod form is a function  decorator Ã©Â?see the description of  function definitions in Function  definitions for details. It can be called either on the class  (such as C.f()) or on an instance  (such as C().f()). The instance is  ignored except for its class. If a  class method is called for a derived  class, the derived class object is  passed as the implied first argument. Class methods are different than C++  or Java static methods. If you want  those, see staticmethod() in this  section. @staticmethod A static method does not receive an  implicit first argument. To declare a  static method, use this idiom: The @staticmethod form is a function  decorator Ã©Â?see the description of  function definitions in Function  definitions for details. It can be called either on the class  (such as C.f()) or on an instance  (such as C().f()). The instance is  ignored except for its class. Static methods in Python are similar  to those found in Java or C++. For a  more advanced concept, see  classmethod() in this section. ","@classmethod A class method receives the class as  implicit first argument, just like an  instance method receives the instance. To declare a class method, use this  idiom: @staticmethod A static method does not receive an  implicit first argument. To declare a  static method, use this idiom: The @staticmethod form is a function  decorator Ã©Â?see the description of  function definitions in Function  definitions for details. ","@classmethod A class method receives the class as  implicit first argument, just like an  instance method receives the instance. To declare a class method, use this  idiom: If you want  those, see staticmethod() in this  section. @staticmethod A static method does not receive an  implicit first argument. To declare a  static method, use this idiom: It can be called either on the class  (such as C.f()) or on an instance  (such as C().f()). The instance is  ignored except for its class. ","Official python docs: @classmethod A class method receives the class as  implicit first argument, just like an  instance method receives the instance. To declare a class method, use this  idiom: It can be called either on the class  (such as C.f()) or on an instance  (such as C().f()). If a  class method is called for a derived  class, the derived class object is  passed as the implied first argument. @staticmethod A static method does not receive an  implicit first argument. To declare a  static method, use this idiom: It can be called either on the class  (such as C.f()) or on an instance  (such as C().f()). "
141576,"Let's say we have a single byte: Applying a single left bitshift gets us: The leftmost zero was shifted out of the byte, and a new zero was appended to the right end of the byte. The bits don't rollover; they are discarded. That means if you left shift 1101100 and then right shift it, you won't get the same result back. Shifting left by N is equivalent to multiplying by 2N. Shifting right by N is (if you are using ones' complement) is the equivalent of dividing by 2N and rounding to zero. Bitshifting can be used for insanely fast multiplication and division, provided you are working with a power of 2. Almost all low-level graphics routines use bitshifting. For example, way back in the olden days, we used mode 13h (320x200 256 colors) for games. In Mode 13h, the video memory was laid out sequentially per pixel. That meant to calculate the location for a pixel, you would use the following math: Now, back in that day and age, speed was critical, so we would use bitshifts to do this operation. However, 320 is not a power of two, so to get around this we have to find out what is a power of two that added together makes 320: Now we can convert that into left shifts: For a final result of: Now we get the same offset as before, except instead of an expensive multiplication operation, we use the two bitshifts...in x86 it would be something like this (note, it's been forever since I've done assembly (editor's note: corrected a couple mistakes and added a 32-bit example)): Total: 28 cycles on whatever ancient CPU had these timings. Vrs 12 cycles on the same ancient CPU. Yes, we would work this hard to shave off 16 CPU cycles. In 32 or 64-bit mode, both versions get a lot shorter and faster. Modern out-of-order execution CPUs like Intel Skylake (see http://agner.org/optimize/) have very fast hardware multiply (low latency and high throughput), so the gain is much smaller. AMD Bulldozer-family is a bit slower, especially for 64-bit multiply. On Intel CPUs, and AMD Ryzen, two shifts are slightly lower latency but more instructions than a multiply (which may lead to lower throughput): vs. Compilers will do this for you: See how gcc, clang, and MSVC all use shift+lea when optimizing return 320*row + col;. The most interesting thing to note here is that x86 has a shift-and-add instruction (LEA) that can do small left shifts and add at the same time, with the performance as and add instruction. ARM is even more powerful: one operand of any instruction can be left or right shifted for free. So scaling by a compile-time-constant that's known to be a power-of-2 can be even more efficient than a multiply. OK, back in the modern days... something more useful now would be to use bitshifting to store two 8-bit values in a 16-bit integer. For example, in C#: In C++, compilers should do this for you if you used a struct with two 8-bit members, but in practice don't always. ","Applying a single left bitshift gets us: The leftmost zero was shifted out of the byte, and a new zero was appended to the right end of the byte. The bits don't rollover; they are discarded. Shifting left by N is equivalent to multiplying by 2N. Shifting right by N is (if you are using ones' complement) is the equivalent of dividing by 2N and rounding to zero. So scaling by a compile-time-constant that's known to be a power-of-2 can be even more efficient than a multiply. ","Applying a single left bitshift gets us: The leftmost zero was shifted out of the byte, and a new zero was appended to the right end of the byte. The bits don't rollover; they are discarded. Shifting left by N is equivalent to multiplying by 2N. Shifting right by N is (if you are using ones' complement) is the equivalent of dividing by 2N and rounding to zero. Almost all low-level graphics routines use bitshifting. Now, back in that day and age, speed was critical, so we would use bitshifts to do this operation. So scaling by a compile-time-constant that's known to be a power-of-2 can be even more efficient than a multiply. ","Applying a single left bitshift gets us: The leftmost zero was shifted out of the byte, and a new zero was appended to the right end of the byte. The bits don't rollover; they are discarded. That means if you left shift 1101100 and then right shift it, you won't get the same result back. Shifting left by N is equivalent to multiplying by 2N. Shifting right by N is (if you are using ones' complement) is the equivalent of dividing by 2N and rounding to zero. Almost all low-level graphics routines use bitshifting. In 32 or 64-bit mode, both versions get a lot shorter and faster. Modern out-of-order execution CPUs like Intel Skylake (see http://agner.org/optimize/) have very fast hardware multiply (low latency and high throughput), so the gain is much smaller. "
141873,"The bit shifting operators do exactly what their name implies. They shift bits. Here's a brief (or not-so-brief) introduction to the different shift operators. The Operators &gt;&gt; is the  arithmetic (or signed) right shift operator. &gt;&gt;&gt; is the logical (or unsigned) right shift operator. &lt;&lt; is the left shift operator, and meets the needs of both logical and arithmetic shifts. All of these operators can be applied to integer values (int, long, possibly short and byte or char). In some languages, applying the shift operators to any datatype smaller than int automatically resizes the operand to be an int. Note that &lt;&lt;&lt; is not an operator, because it would be redundant. Also note that C and C++ do not distinguish between the right shift operators. They provide only the &gt;&gt; operator, and the right-shifting behavior is implementation defined for signed types. Left shift (&lt;&lt;) Integers are stored, in memory, as a series of bits. For example, the number 6 stored as a 32-bit int would be: Shifting this bit pattern to the left one position (6 &lt;&lt; 1) would result in the number 12: As you can see, the digits have shifted to the left by one position, and the last digit on the right is filled with a zero. You might also note that shifting left is equivalent to multiplication by powers of 2. So 6 &lt;&lt; 1 is equivalent to 6 * 2, and 6 &lt;&lt; 3 is equivalent to 6 * 8. A good optimizing compiler will replace multiplications with shifts when possible. Non-circular shifting Please note that these are not circular shifts. Shifting this value to the left by one position (3,758,096,384 &lt;&lt; 1): results in 3,221,225,472: The digit that gets shifted ""off the end"" is lost. It does not wrap around. Logical right shift (>>>) A logical right shift is the converse to the left shift. Rather than moving bits to the left, they simply move to the right. For example, shifting the number 12: to the right by one position (12 &gt;&gt;&gt; 1) will get back our original 6: So we see that shifting to the right is equivalent to division by powers of 2. Lost bits are gone However, a shift cannot reclaim ""lost"" bits. For example, if we shift this pattern: to the left 4 positions (939,524,102 &lt;&lt; 4), we get 2,147,483,744: and then shifting back ((939,524,102 &lt;&lt; 4) &gt;&gt;&gt; 4) we get 134,217,734: We cannot get back our original value once we have lost bits. Arithmetic right shift (>>) The arithmetic right shift is exactly like the logical right shift, except instead of padding with zero, it pads with the most significant bit. This is because the most significant bit is the sign bit, or the bit that distinguishes positive and negative numbers. By padding with the most significant bit, the arithmetic right shift is sign-preserving. For example, if we interpret this bit pattern as a negative number: we have the number -2,147,483,552. Shifting this to the right 4 positions with the arithmetic shift (-2,147,483,552 >> 4) would give us: or the number -134,217,722. So we see that we have preserved the sign of our negative numbers by using the arithmetic right shift, rather than the logical right shift. And once again, we see that we are performing division by powers of 2. ","The bit shifting operators do exactly what their name implies. They shift bits. &gt;&gt; is the  arithmetic (or signed) right shift operator. &gt;&gt;&gt; is the logical (or unsigned) right shift operator. &lt;&lt; is the left shift operator, and meets the needs of both logical and arithmetic shifts. All of these operators can be applied to integer values (int, long, possibly short and byte or char). In some languages, applying the shift operators to any datatype smaller than int automatically resizes the operand to be an int. By padding with the most significant bit, the arithmetic right shift is sign-preserving. ","The bit shifting operators do exactly what their name implies. They shift bits. &gt;&gt; is the  arithmetic (or signed) right shift operator. &gt;&gt;&gt; is the logical (or unsigned) right shift operator. &lt;&lt; is the left shift operator, and meets the needs of both logical and arithmetic shifts. All of these operators can be applied to integer values (int, long, possibly short and byte or char). In some languages, applying the shift operators to any datatype smaller than int automatically resizes the operand to be an int. Also note that C and C++ do not distinguish between the right shift operators. Logical right shift (>>>) Lost bits are gone ","The bit shifting operators do exactly what their name implies. They shift bits. &gt;&gt; is the  arithmetic (or signed) right shift operator. &gt;&gt;&gt; is the logical (or unsigned) right shift operator. &lt;&lt; is the left shift operator, and meets the needs of both logical and arithmetic shifts. All of these operators can be applied to integer values (int, long, possibly short and byte or char). In some languages, applying the shift operators to any datatype smaller than int automatically resizes the operand to be an int. Integers are stored, in memory, as a series of bits. to the right by one position (12 &gt;&gt;&gt; 1) will get back our original 6: to the left 4 positions (939,524,102 &lt;&lt; 4), we get 2,147,483,744: So we see that we have preserved the sign of our negative numbers by using the arithmetic right shift, rather than the logical right shift. "
226844,"$this-&gt; is used to refer to a specific instance of a class's variables (member variables) or methods. $derek is now a specific instance of Person.Every Person has a first_name and a last_name, but $derek has a specific first_name and last_name (Derek Martin). Inside the $derek instance, we can refer to those as $this->first_name and $this->last_name ClassName:: is used to refer to that type of class, and its static variables, static methods. If it helps, you can mentally replace the word ""static"" with ""shared"". Because they are shared, they cannot refer to $this, which refers to a specific instance (not shared). Static Variables (i.e. static $db_connection) can be shared among all instances of a type of object. For example, all database objects share a single connection (static $connection). Static Variables Example:Pretend we have a database class with a single member variable: static $num_connections;Now, put this in the constructor: Just as objects have constructors, they also have destructors, which are executed when the object dies or is unset: Every time we create a new instance, it will increase our connection counter by one. Every time we destroy or stop using an instance, it will decrease the connection counter by one. In this way, we can monitor the number of instances of the database object we have in use with: Because $num_connections is static (shared), it will reflect the total number of active database objects. You may have seen this technique used to share database connections among all instances of a database class. This is done because creating the database connection takes a long time, so it's best to create just one, and share it (this is called a Singleton Pattern). Static Methods (i.e. public static View::format_phone_number($digits)) can be used WITHOUT first instantiating one of those objects (i.e. They do not internally refer to $this). Static Method Example: As you can see, public static function prettyName knows nothing about the object. It's just working with the parameters you pass in, like a normal function that's not part of an object. Why bother, then, if we could just have it not as part of the object? First, attaching functions to objects helps you keep things organized, so you know where to find them. Second, it prevents naming conflicts. In a big project, you're likely to have two developers create getName() functions. If one creates a ClassName1::getName(), and the other creates ClassName2::getName(), it's no problem at all. No conflict. Yay static methods! SELF::If you are coding outside the object that has the static method you want to refer to, you must call it using the object's name View::format_phone_number($phone_number);If you are coding inside the object that has the static method you want to refer to, you can either use the object's name View::format_phone_number($pn), OR you can use the self::format_phone_number($pn)  shortcut The same goes for static variables:Example: View::templates_path versus self::templates_path Inside the DB class, if we were referring to a static method of some other object, we would use the object's name:Example: Session::getUsersOnline(); But if the DB class wanted to refer to its own static variable, it would just say self:Example: self::connection; Hope that helps clear things up :) ","$this-&gt; is used to refer to a specific instance of a class's variables (member variables) or methods. Inside the $derek instance, we can refer to those as $this->first_name and $this->last_name If it helps, you can mentally replace the word ""static"" with ""shared"". SELF::If you are coding outside the object that has the static method you want to refer to, you must call it using the object's name View::format_phone_number($phone_number);If you are coding inside the object that has the static method you want to refer to, you can either use the object's name View::format_phone_number($pn), OR you can use the self::format_phone_number($pn)  shortcut The same goes for static variables:Example: View::templates_path versus self::templates_path Inside the DB class, if we were referring to a static method of some other object, we would use the object's name:Example: Session::getUsersOnline(); But if the DB class wanted to refer to its own static variable, it would just say self:Example: self::connection; ","$this-&gt; is used to refer to a specific instance of a class's variables (member variables) or methods. $derek is now a specific instance of Person.Every Person has a first_name and a last_name, but $derek has a specific first_name and last_name (Derek Martin). If it helps, you can mentally replace the word ""static"" with ""shared"". Why bother, then, if we could just have it not as part of the object? First, attaching functions to objects helps you keep things organized, so you know where to find them. SELF::If you are coding outside the object that has the static method you want to refer to, you must call it using the object's name View::format_phone_number($phone_number);If you are coding inside the object that has the static method you want to refer to, you can either use the object's name View::format_phone_number($pn), OR you can use the self::format_phone_number($pn)  shortcut The same goes for static variables:Example: View::templates_path versus self::templates_path Inside the DB class, if we were referring to a static method of some other object, we would use the object's name:Example: Session::getUsersOnline(); But if the DB class wanted to refer to its own static variable, it would just say self:Example: self::connection; ","$this-&gt; is used to refer to a specific instance of a class's variables (member variables) or methods. If it helps, you can mentally replace the word ""static"" with ""shared"". Because they are shared, they cannot refer to $this, which refers to a specific instance (not shared). Static Method Example: It's just working with the parameters you pass in, like a normal function that's not part of an object. Yay static methods! SELF::If you are coding outside the object that has the static method you want to refer to, you must call it using the object's name View::format_phone_number($phone_number);If you are coding inside the object that has the static method you want to refer to, you can either use the object's name View::format_phone_number($pn), OR you can use the self::format_phone_number($pn)  shortcut The same goes for static variables:Example: View::templates_path versus self::templates_path Inside the DB class, if we were referring to a static method of some other object, we would use the object's name:Example: Session::getUsersOnline(); But if the DB class wanted to refer to its own static variable, it would just say self:Example: self::connection; "
2226955,"Here is some HTML that demonstrates how padding and margin affect clickability, and background filling. An object receives clicks to its padding, but clicks on an objects margin'd area go to its parent. $("".outer"").click(function(e) { console.log(""outer""); e.stopPropagation(); }); $("".inner"").click(function(e) { console.log(""inner""); e.stopPropagation(); }); .outer { padding: 10px; background: red; } .inner { margin: 10px; padding: 10px; background: blue; border: solid white 1px; } &lt;script src=""http://code.jquery.com/jquery-latest.js""&gt;&lt;/script&gt; &lt;div class=""outer""&gt; &lt;div class=""inner"" style=""position:relative; height:0px; width:0px""&gt; &lt;/div&gt; &lt;/div&gt; ","An object receives clicks to its padding, but clicks on an objects margin'd area go to its parent. border: solid white 1px; ","An object receives clicks to its padding, but clicks on an objects margin'd area go to its parent. background: blue; } &lt;div class=""inner"" style=""position:relative; height:0px; width:0px""&gt; ","An object receives clicks to its padding, but clicks on an objects margin'd area go to its parent. }); .inner { padding: 10px; &lt;div class=""outer""&gt; "
256447,"There are some issues worth noticing if you're dealing with classes that are persisted using an Object-Relationship Mapper (ORM) like Hibernate, if you didn't think this was unreasonably complicated already! Lazy loaded objects are subclasses If your objects are persisted using an ORM, in many cases you will be dealing with dynamic proxies to avoid loading object too early from the data store. These proxies are implemented as subclasses of your own class. This means thatthis.getClass() == o.getClass() will return false. For example: If you're dealing with an ORM, using o instanceof Person is the only thing that will behave correctly. Lazy loaded objects have null-fields ORMs usually use the getters to force loading of lazy loaded objects. This means that person.name will be null if person is lazy loaded, even if person.getName() forces loading and returns ""John Doe"". In my experience, this crops up more often in hashCode() and equals(). If you're dealing with an ORM, make sure to always use getters, and never field references in hashCode() and equals(). Saving an object will change its state Persistent objects often use a id field to hold the key of the object. This field will be automatically updated when an object is first saved. Don't use an id field in hashCode(). But you can use it in equals(). A pattern I often use is But: you cannot include getId() in hashCode(). If you do, when an object is persisted, its hashCode changes. If the object is in a HashSet, you'll ""never"" find it again. In my Person example, I probably would use getName() for hashCode and getId() plus getName() (just for paranoia) for equals(). It's okay if there are some risk of ""collisions"" for hashCode(), but never okay for equals(). hashCode() should use the non-changing subset of properties from equals() ","Lazy loaded objects are subclasses If your objects are persisted using an ORM, in many cases you will be dealing with dynamic proxies to avoid loading object too early from the data store. These proxies are implemented as subclasses of your own class. This means thatthis.getClass() == o.getClass() will return false. A pattern I often use is ","Lazy loaded objects are subclasses If your objects are persisted using an ORM, in many cases you will be dealing with dynamic proxies to avoid loading object too early from the data store. These proxies are implemented as subclasses of your own class. This means thatthis.getClass() == o.getClass() will return false. Lazy loaded objects have null-fields ORMs usually use the getters to force loading of lazy loaded objects. hashCode() should use the non-changing subset of properties from equals() ","Lazy loaded objects are subclasses If your objects are persisted using an ORM, in many cases you will be dealing with dynamic proxies to avoid loading object too early from the data store. These proxies are implemented as subclasses of your own class. This means thatthis.getClass() == o.getClass() will return false. For example: If you're dealing with an ORM, using o instanceof Person is the only thing that will behave correctly. A pattern I often use is In my Person example, I probably would use getName() for hashCode and getId() plus getName() (just for paranoia) for equals(). "
1255015,"You should look at the article C++ Programming/Type Casting. It contains a good description of all of the different cast types. The following taken from the above link: const_cast const_cast(expression) The const_cast&lt;>() is used to add/remove  const(ness) (or volatile-ness) of a variable. static_cast static_cast(expression) The static_cast&lt;>() is used to cast between  the integer types. 'e.g.' char->long, int->short etc. Static cast is also used to cast pointers to related types, for  example casting void* to the appropriate type. dynamic_cast Dynamic cast is used to convert pointers and references at run-time,  generally for the purpose of casting a pointer or reference up or down  an inheritance chain (inheritance hierarchy). dynamic_cast(expression) The target type must be a pointer or reference type, and the  expression must evaluate to a pointer or reference. Dynamic cast works  only when the type of object to which the expression refers is  compatible with the target type and the base class has at least one  virtual member function. If not, and the type of expression being cast  is a pointer, NULL is returned, if a dynamic cast on a reference  fails, a bad_cast exception is thrown. When it doesn't fail, dynamic  cast returns a pointer or reference of the target type to the object  to which expression referred. reinterpret_cast Reinterpret cast simply casts one type bitwise to another. Any pointer  or integral type can be casted to any other with reinterpret cast,  easily allowing for misuse. For instance, with reinterpret cast one  might, unsafely, cast an integer pointer to a string pointer. ","const_cast(expression) The const_cast&lt;>() is used to add/remove  const(ness) (or volatile-ness) of a variable. static_cast(expression) The static_cast&lt;>() is used to cast between  the integer types. Static cast is also used to cast pointers to related types, for  example casting void* to the appropriate type. Dynamic cast is used to convert pointers and references at run-time,  generally for the purpose of casting a pointer or reference up or down  an inheritance chain (inheritance hierarchy). Dynamic cast works  only when the type of object to which the expression refers is  compatible with the target type and the base class has at least one  virtual member function. ","const_cast(expression) The const_cast&lt;>() is used to add/remove  const(ness) (or volatile-ness) of a variable. static_cast(expression) The static_cast&lt;>() is used to cast between  the integer types. Static cast is also used to cast pointers to related types, for  example casting void* to the appropriate type. Dynamic cast is used to convert pointers and references at run-time,  generally for the purpose of casting a pointer or reference up or down  an inheritance chain (inheritance hierarchy). reinterpret_cast Reinterpret cast simply casts one type bitwise to another. For instance, with reinterpret cast one  might, unsafely, cast an integer pointer to a string pointer. ","const_cast(expression) The const_cast&lt;>() is used to add/remove  const(ness) (or volatile-ness) of a variable. static_cast(expression) The static_cast&lt;>() is used to cast between  the integer types. Static cast is also used to cast pointers to related types, for  example casting void* to the appropriate type. Dynamic cast is used to convert pointers and references at run-time,  generally for the purpose of casting a pointer or reference up or down  an inheritance chain (inheritance hierarchy). dynamic_cast(expression) Dynamic cast works  only when the type of object to which the expression refers is  compatible with the target type and the base class has at least one  virtual member function. When it doesn't fail, dynamic  cast returns a pointer or reference of the target type to the object  to which expression referred. Any pointer  or integral type can be casted to any other with reinterpret cast,  easily allowing for misuse. "
2180920,"static_cast static_cast is used for cases where you basically want to reverse an implicit conversion, with a few restrictions and additions. static_cast performs no runtime checks. This should be used if you know that you refer to an object of a specific type, and thus a check would be unnecessary. Example: In this example, you know that you passed a MyClass object, and thus there isn't any need for a runtime check to ensure this. dynamic_cast dynamic_cast is useful when you don't know what the dynamic type of the object is. It returns a null pointer if the object referred to doesn't contain the type casted to as a base class (when you cast to a reference, a bad_cast exception is thrown in that case). You cannot use dynamic_cast if you downcast (cast to a derived class) and the argument type is not polymorphic. For example, the following code is not valid, because Base doesn't contain any virtual function: An ""up-cast"" (cast to the base class) is always valid with both static_cast and dynamic_cast, and also without any cast, as an ""up-cast"" is an implicit conversion. Regular Cast These casts are also called C-style cast. A C-style cast is basically identical to trying out a range of sequences of C++ casts, and taking the first C++ cast that works, without ever considering dynamic_cast. Needless to say, this is much more powerful as it combines all of const_cast, static_cast and reinterpret_cast, but it's also unsafe, because it does not use dynamic_cast. In addition, C-style casts not only allow you to do this, but they also allow you to safely cast to a private base-class, while the ""equivalent"" static_cast sequence would give you a compile-time error for that. Some people prefer C-style casts because of their brevity. I use them for numeric casts only, and use the appropriate C++ casts when user defined types are involved, as they provide stricter checking. ","static_cast is used for cases where you basically want to reverse an implicit conversion, with a few restrictions and additions. static_cast performs no runtime checks. dynamic_cast A C-style cast is basically identical to trying out a range of sequences of C++ casts, and taking the first C++ cast that works, without ever considering dynamic_cast. ","static_cast static_cast is used for cases where you basically want to reverse an implicit conversion, with a few restrictions and additions. static_cast performs no runtime checks. For example, the following code is not valid, because Base doesn't contain any virtual function: A C-style cast is basically identical to trying out a range of sequences of C++ casts, and taking the first C++ cast that works, without ever considering dynamic_cast. Needless to say, this is much more powerful as it combines all of const_cast, static_cast and reinterpret_cast, but it's also unsafe, because it does not use dynamic_cast. ","static_cast static_cast is used for cases where you basically want to reverse an implicit conversion, with a few restrictions and additions. static_cast performs no runtime checks. This should be used if you know that you refer to an object of a specific type, and thus a check would be unnecessary. In this example, you know that you passed a MyClass object, and thus there isn't any need for a runtime check to ensure this. These casts are also called C-style cast. A C-style cast is basically identical to trying out a range of sequences of C++ casts, and taking the first C++ cast that works, without ever considering dynamic_cast. "
1177529,"Strictly, method a is the least resource intensive: Proven less CPU intensive for same total duration a million rows by some one with way too much time on their hands: Most efficient way in SQL Server to get date from date+time? I saw a similar test elsewhere with similar results too. I prefer the DATEADD/DATEDIFF because: varchar is subject to language/dateformat issues Example: Why is my CASE expression non-deterministic? float relies on internal storage it extends to work out first day of month, tomorrow etc by changing ""0"" base Edit, Oct 2011 For SQL Server 2008+, you can CAST to date. Or just use date so no time to remove. Edit, Jan 2012 A worked example of how flexible this is: Need to calculate by rounded time or date figure in sql server Edit, May 2012 Do not use this in WHERE clauses and the like without thinking: adding a function or CAST to a column invalidates index usage. See number 2 here: http://www.simple-talk.com/sql/t-sql-programming/ten-common-sql-programming-mistakes/ Now, this does have an example of later SQL Server optimiser versions managing CAST to date correctly, but generally it will be a bad idea ... ","Strictly, method a is the least resource intensive: Proven less CPU intensive for same total duration a million rows by some one with way too much time on their hands: Most efficient way in SQL Server to get date from date+time? I prefer the DATEADD/DATEDIFF because: varchar is subject to language/dateformat issues float relies on internal storage it extends to work out first day of month, tomorrow etc by changing ""0"" base For SQL Server 2008+, you can CAST to date. Or just use date so no time to remove. Do not use this in WHERE clauses and the like without thinking: adding a function or CAST to a column invalidates index usage. ","Strictly, method a is the least resource intensive: Proven less CPU intensive for same total duration a million rows by some one with way too much time on their hands: Most efficient way in SQL Server to get date from date+time? I prefer the DATEADD/DATEDIFF because: varchar is subject to language/dateformat issues float relies on internal storage it extends to work out first day of month, tomorrow etc by changing ""0"" base Edit, Oct 2011 For SQL Server 2008+, you can CAST to date. Or just use date so no time to remove. See number 2 here: http://www.simple-talk.com/sql/t-sql-programming/ten-common-sql-programming-mistakes/ Now, this does have an example of later SQL Server optimiser versions managing CAST to date correctly, but generally it will be a bad idea ... ","Strictly, method a is the least resource intensive: Proven less CPU intensive for same total duration a million rows by some one with way too much time on their hands: Most efficient way in SQL Server to get date from date+time? I prefer the DATEADD/DATEDIFF because: varchar is subject to language/dateformat issues Example: Why is my CASE expression non-deterministic? float relies on internal storage it extends to work out first day of month, tomorrow etc by changing ""0"" base Edit, Oct 2011 For SQL Server 2008+, you can CAST to date. Or just use date so no time to remove. Edit, Jan 2012 Now, this does have an example of later SQL Server optimiser versions managing CAST to date correctly, but generally it will be a bad idea ... "
1878983,"It depends on what you mean. Do you want actual tab characters in your file to appear 4 spaces wide, or by ""tab"" do you actually mean an indent, generated by pressing the tab key, which would result in the file literally containing (up to) 4 space characters for each ""tab"" you type? Depending on your answer, one of the following sets ofsettings should work for you: For tab characters that appear 4-spaces-wide: If you're using actual tab character in your source code you probably also want these settings (these are actually the defaults, but you may want to set them defensively): Finally, if you want an indent to correspond to a single tab, you should also use: For indents that consist of 4 space characters but are entered with the tab key: To make the above settings permanent addthese lines to your vimrc. In case you need to make adjustments, or would simply like to understand what these options all mean, here's a breakdown of what each option means: The width of a hard tabstop measured in ""spaces"" -- effectively the (maximum) width of an actual tab character. The size of an ""indent"". It's also measured in spaces, so if your code base indents with tab characters then you want shiftwidth to equal the number of tab characters times tabstop. This is also used by things like the =, &gt; and &lt; commands. Setting this to a non-zero value other than tabstop will make the tab key (in insert mode)   insert a combination of spaces (and possibly tabs) to simulate tab stops at this width. Enabling this will make the tab key (in insert mode) insert spaces instead of   tab characters. This also affects the behavior of the retab command. Enabling this will make the tab key (in insert mode) insert spaces or tabs to  go to the next indent  of the next tabstop when the cursor is at the beginning of a line (i.e. the  only preceding characters are whitespace). For more details on any of these see :help 'optionname' in vim (e.g. :help 'tabstop') ","For tab characters that appear 4-spaces-wide: Finally, if you want an indent to correspond to a single tab, you should also use: For indents that consist of 4 space characters but are entered with the tab key: To make the above settings permanent addthese lines to your vimrc. ","For tab characters that appear 4-spaces-wide: For indents that consist of 4 space characters but are entered with the tab key: To make the above settings permanent addthese lines to your vimrc. In case you need to make adjustments, or would simply like to understand what these options all mean, here's a breakdown of what each option means: The size of an ""indent"". Setting this to a non-zero value other than tabstop will make the tab key (in insert mode)   insert a combination of spaces (and possibly tabs) to simulate tab stops at this width. ","Do you want actual tab characters in your file to appear 4 spaces wide, or by ""tab"" do you actually mean an indent, generated by pressing the tab key, which would result in the file literally containing (up to) 4 space characters for each ""tab"" you type? Depending on your answer, one of the following sets ofsettings should work for you: For tab characters that appear 4-spaces-wide: For indents that consist of 4 space characters but are entered with the tab key: To make the above settings permanent addthese lines to your vimrc. In case you need to make adjustments, or would simply like to understand what these options all mean, here's a breakdown of what each option means: Enabling this will make the tab key (in insert mode) insert spaces or tabs to  go to the next indent  of the next tabstop when the cursor is at the beginning of a line (i.e. "
2641374,"There's no built-in ability to break in forEach. To interrupt execution you would have to throw an exception of some sort. eg. var BreakException = {}; try { [1, 2, 3].forEach(function(el) { console.log(el); if (el === 2) throw BreakException; }); } catch (e) { if (e !== BreakException) throw e; } JavaScript exceptions aren't terribly pretty. A traditional for loop might be more appropriate if you really need to break inside it. Use Array#some Instead, use Array#some: [1, 2, 3].some(function(el) { console.log(el); return el === 2; }); This works because some returns true as soon as any of the callbacks, executed in array order, return true, short-circuiting the execution of the rest. some, its inverse every (which will stop on a return false), and forEach are all ECMAScript Fifth Edition methods which will need to be added to the Array.prototype on browsers where they're missing. ",There's no built-in ability to break in forEach. To interrupt execution you would have to throw an exception of some sort. if (e !== BreakException) throw e; A traditional for loop might be more appropriate if you really need to break inside it. ,"There's no built-in ability to break in forEach. To interrupt execution you would have to throw an exception of some sort. if (e !== BreakException) throw e; A traditional for loop might be more appropriate if you really need to break inside it. return el === 2; This works because some returns true as soon as any of the callbacks, executed in array order, return true, short-circuiting the execution of the rest. ","There's no built-in ability to break in forEach. To interrupt execution you would have to throw an exception of some sort. } catch (e) { JavaScript exceptions aren't terribly pretty. A traditional for loop might be more appropriate if you really need to break inside it. [1, 2, 3].some(function(el) { This works because some returns true as soon as any of the callbacks, executed in array order, return true, short-circuiting the execution of the rest. "
2895603,"If 'they' are using a self-signed certificate it is up to them to take the steps required to make their server usable. Specifically that means providing their certificate to you offline in a trustworthy way. So get them to do that. You then import that into your truststore using the keytool as described in the JSSE Reference Guide. Don't even think about the insecure TrustManager posted here. EDIT For the benefit of the seventeen (!) downvoters, and numerous commenters below, who clearly have not actually read what I have written here, this is not a jeremiad against self-signed certificates. There is nothing wrong with self-signed certificates when implemented correctly. But, the correct way to implement them is to have the certificate delivered securely via an offline process, rather than via the unauthenticated channel they are going to be used to authenticate. Surely this is obvious? It is certainly obvious to every security-aware organization I have ever worked for, from banks with thousands of branches to my own companies. The client-side code-base 'solution' of trusting all certificates, including self-signed certificates signed by absolutely anybody, or any arbitary body setting itself up as a CA, is ipso facto not secure. It is just playing at security. It is pointless. You are having a private, tamperproof, reply-proof, injection-proof conversation with ... somebody. Anybody. A man in the middle. An impersonator. Anybody. You may as well just use plaintext. ",If 'they' are using a self-signed certificate it is up to them to take the steps required to make their server usable. You then import that into your truststore using the keytool as described in the JSSE Reference Guide. Don't even think about the insecure TrustManager posted here. ,"If 'they' are using a self-signed certificate it is up to them to take the steps required to make their server usable. You then import that into your truststore using the keytool as described in the JSSE Reference Guide. Don't even think about the insecure TrustManager posted here. It is certainly obvious to every security-aware organization I have ever worked for, from banks with thousands of branches to my own companies. It is just playing at security. ","If 'they' are using a self-signed certificate it is up to them to take the steps required to make their server usable. You then import that into your truststore using the keytool as described in the JSSE Reference Guide. EDIT For the benefit of the seventeen (!) You are having a private, tamperproof, reply-proof, injection-proof conversation with ... somebody. A man in the middle. An impersonator. "
1997397,"Ok, after some time, here's what I landed on: .parent { position: relative; top: 0; left: 0; } .image1 { position: relative; top: 0; left: 0; } .image2 { position: absolute; top: 30px; left: 70px; } &lt;div class=""parent""&gt; &lt;img class=""image1"" src=""https://placehold.it/50"" /&gt; &lt;img class=""image2"" src=""https://placehold.it/100"" /&gt; &lt;/div&gt; As the simplest solution. That is: Create a relative div that is placed in the flow of the page; place the base image first as relative so that the div knows how big it should be; place the overlays as absolutes relative to the upper left of the first image. The trick is to get the relatives and absolutes correct. ","&lt;div class=""parent""&gt; Create a relative div that is placed in the flow of the page; place the base image first as relative so that the div knows how big it should be; place the overlays as absolutes relative to the upper left of the first image. ",top: 0; .image2 { As the simplest solution. Create a relative div that is placed in the flow of the page; place the base image first as relative so that the div knows how big it should be; place the overlays as absolutes relative to the upper left of the first image. ,.parent { position: relative; top: 0; position: relative; Create a relative div that is placed in the flow of the page; place the base image first as relative so that the div knows how big it should be; place the overlays as absolutes relative to the upper left of the first image. 
4221845,"Here's how to use generics to get an array of precisely the type youÃ©ÂÂ¥Ã¦ÂªÂe looking for while preserving type safety (as opposed to the other answers, which will either give you back an Object array or result in warnings at compile time): That compiles without warnings, and as you can see in main, for whatever type you declare an instance of GenSet as, you can assign a to an array of that type, and you can assign an element from a to a variable of that type, meaning that the array and the values in the array are of the correct type. It works by using class literals as runtime type tokens, as discussed in the Java Tutorials. Class literals are treated by the compiler as instances of java.lang.Class. To use one, simply follow the name of a class with .class. So, String.class acts as a Class object representing the class String. This also works for interfaces, enums, any-dimensional arrays (e.g. String[].class), primitives (e.g. int.class), and the keyword void (i.e. void.class). Class itself is generic (declared as Class&lt;T&gt;, where T stands for the type that the Class object is representing), meaning that the type of String.class is Class&lt;String&gt;. So, whenever you call the constructor for GenSet, you pass in a class literal for the first argument representing an array of the GenSet instance's declared type (e.g. String[].class for GenSet&lt;String&gt;). Note that you won't be able to get an array of primitives, since primitives can't be used for type variables. Inside the constructor, calling the method cast returns the passed Object argument cast to the class represented by the Class object on which the method was called. Calling the static method newInstance in java.lang.reflect.Array returns as an Object an array of the type represented by the Class object passed as the first argument and of the length specified by the int passed as the second argument. Calling the method getComponentType returns a Class object representing the component type of the array represented by the Class object on which the method was called (e.g. String.class for String[].class, null if the Class object doesn't represent an array). That last sentence isn't entirely accurate. Calling String[].class.getComponentType() returns a Class object representing the class String, but its type is Class&lt;?&gt;, not Class&lt;String&gt;, which is why you can't do something like the following. Same goes for every method in Class that returns a Class object. Regarding Joachim Sauer's comment on this answer (I don't have enough reputation to comment on it myself), the example using the cast to T[] will result in a warning because the compiler can't guarantee type safety in that case. Edit regarding Ingo's comments: ","Here's how to use generics to get an array of precisely the type youÃ©ÂÂ¥Ã¦ÂªÂe looking for while preserving type safety (as opposed to the other answers, which will either give you back an Object array or result in warnings at compile time): It works by using class literals as runtime type tokens, as discussed in the Java Tutorials. Class literals are treated by the compiler as instances of java.lang.Class. To use one, simply follow the name of a class with .class. This also works for interfaces, enums, any-dimensional arrays (e.g. Note that you won't be able to get an array of primitives, since primitives can't be used for type variables. Calling the static method newInstance in java.lang.reflect.Array returns as an Object an array of the type represented by the Class object passed as the first argument and of the length specified by the int passed as the second argument. Calling the method getComponentType returns a Class object representing the component type of the array represented by the Class object on which the method was called (e.g. Calling String[].class.getComponentType() returns a Class object representing the class String, but its type is Class&lt;?&gt;, not Class&lt;String&gt;, which is why you can't do something like the following. ","Here's how to use generics to get an array of precisely the type youÃ©ÂÂ¥Ã¦ÂªÂe looking for while preserving type safety (as opposed to the other answers, which will either give you back an Object array or result in warnings at compile time): That compiles without warnings, and as you can see in main, for whatever type you declare an instance of GenSet as, you can assign a to an array of that type, and you can assign an element from a to a variable of that type, meaning that the array and the values in the array are of the correct type. It works by using class literals as runtime type tokens, as discussed in the Java Tutorials. To use one, simply follow the name of a class with .class. This also works for interfaces, enums, any-dimensional arrays (e.g. void.class). Class itself is generic (declared as Class&lt;T&gt;, where T stands for the type that the Class object is representing), meaning that the type of String.class is Class&lt;String&gt;. Note that you won't be able to get an array of primitives, since primitives can't be used for type variables. Calling the static method newInstance in java.lang.reflect.Array returns as an Object an array of the type represented by the Class object passed as the first argument and of the length specified by the int passed as the second argument. Calling the method getComponentType returns a Class object representing the component type of the array represented by the Class object on which the method was called (e.g. Calling String[].class.getComponentType() returns a Class object representing the class String, but its type is Class&lt;?&gt;, not Class&lt;String&gt;, which is why you can't do something like the following. ","Here's how to use generics to get an array of precisely the type youÃ©ÂÂ¥Ã¦ÂªÂe looking for while preserving type safety (as opposed to the other answers, which will either give you back an Object array or result in warnings at compile time): It works by using class literals as runtime type tokens, as discussed in the Java Tutorials. To use one, simply follow the name of a class with .class. So, String.class acts as a Class object representing the class String. This also works for interfaces, enums, any-dimensional arrays (e.g. Class itself is generic (declared as Class&lt;T&gt;, where T stands for the type that the Class object is representing), meaning that the type of String.class is Class&lt;String&gt;. So, whenever you call the constructor for GenSet, you pass in a class literal for the first argument representing an array of the GenSet instance's declared type (e.g. Note that you won't be able to get an array of primitives, since primitives can't be used for type variables. Inside the constructor, calling the method cast returns the passed Object argument cast to the class represented by the Class object on which the method was called. Calling the static method newInstance in java.lang.reflect.Array returns as an Object an array of the type represented by the Class object passed as the first argument and of the length specified by the int passed as the second argument. Calling the method getComponentType returns a Class object representing the component type of the array represented by the Class object on which the method was called (e.g. Calling String[].class.getComponentType() returns a Class object representing the class String, but its type is Class&lt;?&gt;, not Class&lt;String&gt;, which is why you can't do something like the following. "
872522,"HTML / HTTP is stateless, in other words, what you did / saw on the previous page, is completely unconnected with the current page. Except if you use something like sessions, cookies or GET / POST variables. Sessions and cookies are quite easy to use, with session being by far more secure than cookies. More secure, but not completely secure. Session: Remember to run the session_start(); statement on both these pages before you try to access the $_SESSION array, and also before any output is sent to the browser. Cookie: The big difference between sessions and cookies is that the value of the variable will be stored on the server if you're using sessions, and on the client if you're using cookies. I can't think of any good reason to use cookies instead of sessions, except if you want data to persist between sessions, but even then it's perhaps better to store it in a DB, and retrieve it based on a username or id. GET and POST You can add the variable in the link to the next page: This will create a GET variable. Another way is to include a hidden field in a form that submits to page two: And then on page two: Just change the method for the form to post if you want to do it via post. Both are equally insecure, although GET is easier to hack. The fact that each new request is, except for session data, a totally new instance of the script caught me when I first started coding in PHP. Once you get used to it, it's quite simple though. ","HTML / HTTP is stateless, in other words, what you did / saw on the previous page, is completely unconnected with the current page. Except if you use something like sessions, cookies or GET / POST variables. Sessions and cookies are quite easy to use, with session being by far more secure than cookies. Cookie: You can add the variable in the link to the next page: This will create a GET variable. Another way is to include a hidden field in a form that submits to page two: And then on page two: Just change the method for the form to post if you want to do it via post. ","HTML / HTTP is stateless, in other words, what you did / saw on the previous page, is completely unconnected with the current page. Except if you use something like sessions, cookies or GET / POST variables. Sessions and cookies are quite easy to use, with session being by far more secure than cookies. You can add the variable in the link to the next page: This will create a GET variable. Another way is to include a hidden field in a form that submits to page two: And then on page two: Just change the method for the form to post if you want to do it via post. Both are equally insecure, although GET is easier to hack. The fact that each new request is, except for session data, a totally new instance of the script caught me when I first started coding in PHP. Once you get used to it, it's quite simple though. ","HTML / HTTP is stateless, in other words, what you did / saw on the previous page, is completely unconnected with the current page. Except if you use something like sessions, cookies or GET / POST variables. Sessions and cookies are quite easy to use, with session being by far more secure than cookies. More secure, but not completely secure. Remember to run the session_start(); statement on both these pages before you try to access the $_SESSION array, and also before any output is sent to the browser. GET and POST You can add the variable in the link to the next page: This will create a GET variable. Another way is to include a hidden field in a form that submits to page two: And then on page two: Just change the method for the form to post if you want to do it via post. Both are equally insecure, although GET is easier to hack. "
1022952,"I've tried making an object and tried  using .getWidth and .getHeight but  can't get it to work. ThatÃ©ÂºÂs because you are not setting the width and height fields in JFrame, but you are setting them on local variables. Fields HEIGHT and WIDTH are inhereted from ImageObserver BIGBLOCK Seehttp://java.sun.com/javase/6/docs/api/javax/swing/JFrame.html If width and height represent state of the frame, then you could refactorize them to fields, and write getters for them. Then, you could create a Constructor that receives both values as parameters BIGBLOCK If widht and height are going to be constant (after created) then you should use the final modifier. This way, once they are assigned a value, they canÃ©ÂºÂt be modified. Also, the variables i use in  DrawCircle, should I have them in the  constructor or not? The way it is writen now, will only allow you to create one type of circle. If you wanÃ©ÂºÂt to create different circles, you should overload the constructor with one with arguments). For example, if you want to change the attributes xPoint and yPoint, you could have a constructor BIGBLOCK EDIT: BIGBLOCK Those are arguments to constructors. You set values on them when you call the Constructor method. In DrawFrame I set width and height. In DrawCircle I need to access the  width and height of DrawFrame. How do  I do this? BIGBLOCK Now when the DrawCircle constructor executes, it will receive the values you used in DrawFrame  as _width and _height respectively. EDIT: Try doing BIGBLOCK http://java.sun.com/docs/books/tutorial/uiswing/components/frame.html ","Fields HEIGHT and WIDTH are inhereted from ImageObserver BIGBLOCK If width and height represent state of the frame, then you could refactorize them to fields, and write getters for them. Then, you could create a Constructor that receives both values as parameters BIGBLOCK If widht and height are going to be constant (after created) then you should use the final modifier. Also, the variables i use in  DrawCircle, should I have them in the  constructor or not? The way it is writen now, will only allow you to create one type of circle. If you wanÃ©ÂºÂt to create different circles, you should overload the constructor with one with arguments). Those are arguments to constructors. ","Fields HEIGHT and WIDTH are inhereted from ImageObserver BIGBLOCK If width and height represent state of the frame, then you could refactorize them to fields, and write getters for them. Then, you could create a Constructor that receives both values as parameters BIGBLOCK If widht and height are going to be constant (after created) then you should use the final modifier. Also, the variables i use in  DrawCircle, should I have them in the  constructor or not? The way it is writen now, will only allow you to create one type of circle. If you wanÃ©ÂºÂt to create different circles, you should overload the constructor with one with arguments). BIGBLOCK In DrawCircle I need to access the  width and height of DrawFrame. Now when the DrawCircle constructor executes, it will receive the values you used in DrawFrame  as _width and _height respectively. ","ThatÃ©ÂºÂs because you are not setting the width and height fields in JFrame, but you are setting them on local variables. Fields HEIGHT and WIDTH are inhereted from ImageObserver BIGBLOCK If width and height represent state of the frame, then you could refactorize them to fields, and write getters for them. Then, you could create a Constructor that receives both values as parameters BIGBLOCK If widht and height are going to be constant (after created) then you should use the final modifier. This way, once they are assigned a value, they canÃ©ÂºÂt be modified. Also, the variables i use in  DrawCircle, should I have them in the  constructor or not? The way it is writen now, will only allow you to create one type of circle. If you wanÃ©ÂºÂt to create different circles, you should overload the constructor with one with arguments). BIGBLOCK EDIT: "
2175688,"There are several ways to do this, shown below. As a friendly warning, be careful and up-front to the user when dealing with account, profile, and contact data. If you misuse a user's email address or other personal information, bad things can happen. Method A: Use AccountManager (API level 5+) You can use AccountManager.getAccounts or AccountManager.getAccountsByType to get a list of all account names on the device. Fortunately, for certain account types (including com.google), the account names are email addresses. Example snippet below. BIGBLOCK Note that this requires the GET_ACCOUNTS permission: BIGBLOCK More on using AccountManager can be found at the Contact Manager sample code in the SDK. Method B: Use ContactsContract.Profile (API level 14+) As of Android 4.0 (Ice Cream Sandwich), you can get the user's email addresses by accessing their profile. Accessing the user profile is a bit heavyweight as it requires two permissions (more on that below), but email addresses are fairly sensitive pieces of data, so this is the price of admission. Below is a full example that uses a CursorLoader to retrieve profile data rows containing email addresses. BIGBLOCK This requires both the READ_PROFILE and READ_CONTACTS permissions: BIGBLOCK ","If you misuse a user's email address or other personal information, bad things can happen. Method A: Use AccountManager (API level 5+) You can use AccountManager.getAccounts or AccountManager.getAccountsByType to get a list of all account names on the device. Example snippet below. BIGBLOCK Note that this requires the GET_ACCOUNTS permission: BIGBLOCK Method B: Use ContactsContract.Profile (API level 14+) Below is a full example that uses a CursorLoader to retrieve profile data rows containing email addresses. BIGBLOCK This requires both the READ_PROFILE and READ_CONTACTS permissions: BIGBLOCK ","As a friendly warning, be careful and up-front to the user when dealing with account, profile, and contact data. If you misuse a user's email address or other personal information, bad things can happen. Method A: Use AccountManager (API level 5+) You can use AccountManager.getAccounts or AccountManager.getAccountsByType to get a list of all account names on the device. Example snippet below. BIGBLOCK Note that this requires the GET_ACCOUNTS permission: BIGBLOCK More on using AccountManager can be found at the Contact Manager sample code in the SDK. Method B: Use ContactsContract.Profile (API level 14+) Below is a full example that uses a CursorLoader to retrieve profile data rows containing email addresses. BIGBLOCK This requires both the READ_PROFILE and READ_CONTACTS permissions: BIGBLOCK ","As a friendly warning, be careful and up-front to the user when dealing with account, profile, and contact data. If you misuse a user's email address or other personal information, bad things can happen. Method A: Use AccountManager (API level 5+) Fortunately, for certain account types (including com.google), the account names are email addresses. Example snippet below. BIGBLOCK Note that this requires the GET_ACCOUNTS permission: BIGBLOCK More on using AccountManager can be found at the Contact Manager sample code in the SDK. Method B: Use ContactsContract.Profile (API level 14+) As of Android 4.0 (Ice Cream Sandwich), you can get the user's email addresses by accessing their profile. Below is a full example that uses a CursorLoader to retrieve profile data rows containing email addresses. BIGBLOCK This requires both the READ_PROFILE and READ_CONTACTS permissions: BIGBLOCK "
3090500,"Instead of trying to do an end run around the browser's validation, you could put the http:// in as placeholder text. This is from the very page you linked: Placeholder Text The first improvement HTML5 brings to web forms is the ability to set placeholder text in an input field. Placeholder text is displayed inside the input field as long as the field is empty and not focused. As soon as you click on (or tab to) the input field, the placeholder text disappears. YouÃ©ÂÂ¥Ã¦ÂªÂe probably seen placeholder text before. For example, Mozilla Firefox 3.5 now includes placeholder text in the location bar that reads Ã©ÂÂ¥Ã¦Â·Âªearch Bookmarks and HistoryÃ©Â? When you click on (or tab to) the location bar, the placeholder text disappears: Ironically, Firefox 3.5 does not support adding placeholder text to your own web forms. CÃ©ÂÂ¥Ã¦ÂªÂst la vie. Placeholder Support BIGBLOCK HereÃ©ÂÂ¥Ã¦ÂªÂ how you can include placeholder text in your own web forms: BIGBLOCK Browsers that donÃ©ÂÂ¥Ã¦ÂªÂ support the placeholder attribute will simply ignore it. No harm, no foul. See whether your browser supports placeholder text. It wouldn't be exactly the same since it wouldn't provide that ""starting point"" for the user, but it's halfway there at least. ","Instead of trying to do an end run around the browser's validation, you could put the http:// in as placeholder text. Placeholder text is displayed inside the input field as long as the field is empty and not focused. As soon as you click on (or tab to) the input field, the placeholder text disappears. BIGBLOCK HereÃ©ÂÂ¥Ã¦ÂªÂ how you can include placeholder text in your own web forms: BIGBLOCK Browsers that donÃ©ÂÂ¥Ã¦ÂªÂ support the placeholder attribute will simply ignore it. ","Instead of trying to do an end run around the browser's validation, you could put the http:// in as placeholder text. Placeholder text is displayed inside the input field as long as the field is empty and not focused. As soon as you click on (or tab to) the input field, the placeholder text disappears. CÃ©ÂÂ¥Ã¦ÂªÂst la vie. HereÃ©ÂÂ¥Ã¦ÂªÂ how you can include placeholder text in your own web forms: BIGBLOCK Browsers that donÃ©ÂÂ¥Ã¦ÂªÂ support the placeholder attribute will simply ignore it. See whether your browser supports placeholder text. It wouldn't be exactly the same since it wouldn't provide that ""starting point"" for the user, but it's halfway there at least. ","Instead of trying to do an end run around the browser's validation, you could put the http:// in as placeholder text. Placeholder Text The first improvement HTML5 brings to web forms is the ability to set placeholder text in an input field. Placeholder text is displayed inside the input field as long as the field is empty and not focused. As soon as you click on (or tab to) the input field, the placeholder text disappears. When you click on (or tab to) the location bar, the placeholder text disappears: CÃ©ÂÂ¥Ã¦ÂªÂst la vie. HereÃ©ÂÂ¥Ã¦ÂªÂ how you can include placeholder text in your own web forms: BIGBLOCK Browsers that donÃ©ÂÂ¥Ã¦ÂªÂ support the placeholder attribute will simply ignore it. "
1152873,"Start the project with Ctrl+F5 instead of just F5. The console window will now stay open with the Press any key to continue . . . message after the program exits. Note that this requires the Console (/SUBSYSTEM:CONSOLE) linker option, which you can enable as follows: Open up your project, and go to the Solution Explorer. If you're following along with me in K&amp;R, your ""Solution"" will be 'hello' with 1 project under it, also 'hello' in bold. Right click on the 'hello"" (or whatever your project name is.) Choose ""Properties"" from the context menu. Choose Configuration Properties>Linker>System. For the ""Subsystem"" property in the right-hand pane, click the drop-down box in the right hand column. Choose ""Console (/SUBSYSTEM:CONSOLE)"" Click Apply, wait for it to finish doing whatever it does, then click OK. (If ""Apply"" is grayed out, choose some other subsystem option, click Apply, then go back and apply the console option. My experience is that OK by itself won't work.) CTRL-F5 and the subsystem hints work together; they are not separate options. (Courtesy of DJMorreTX from http://social.msdn.microsoft.com/Forums/en-US/vcprerelease/thread/21073093-516c-49d2-81c7-d960f6dc2ac6) ","Start the project with Ctrl+F5 instead of just F5. . message after the program exits. Open up your project, and go to the Solution Explorer. Right click on the 'hello"" (or whatever your project name is.) Choose ""Properties"" from the context menu. Choose Configuration Properties>Linker>System. For the ""Subsystem"" property in the right-hand pane, click the drop-down box in the right hand column. Choose ""Console (/SUBSYSTEM:CONSOLE)"" Click Apply, wait for it to finish doing whatever it does, then click OK. (If ""Apply"" is grayed out, choose some other subsystem option, click Apply, then go back and apply the console option. CTRL-F5 and the subsystem hints work together; they are not separate options. ","Start the project with Ctrl+F5 instead of just F5. The console window will now stay open with the Press any key to continue . . message after the program exits. Open up your project, and go to the Solution Explorer. Right click on the 'hello"" (or whatever your project name is.) Choose ""Properties"" from the context menu. Choose Configuration Properties>Linker>System. For the ""Subsystem"" property in the right-hand pane, click the drop-down box in the right hand column. Choose ""Console (/SUBSYSTEM:CONSOLE)"" Click Apply, wait for it to finish doing whatever it does, then click OK. (If ""Apply"" is grayed out, choose some other subsystem option, click Apply, then go back and apply the console option. CTRL-F5 and the subsystem hints work together; they are not separate options. (Courtesy of DJMorreTX from http://social.msdn.microsoft.com/Forums/en-US/vcprerelease/thread/21073093-516c-49d2-81c7-d960f6dc2ac6) ","Start the project with Ctrl+F5 instead of just F5. The console window will now stay open with the Press any key to continue . . . message after the program exits. Note that this requires the Console (/SUBSYSTEM:CONSOLE) linker option, which you can enable as follows: Open up your project, and go to the Solution Explorer. Right click on the 'hello"" (or whatever your project name is.) Choose ""Properties"" from the context menu. Choose Configuration Properties>Linker>System. For the ""Subsystem"" property in the right-hand pane, click the drop-down box in the right hand column. Choose ""Console (/SUBSYSTEM:CONSOLE)"" Click Apply, wait for it to finish doing whatever it does, then click OK. (If ""Apply"" is grayed out, choose some other subsystem option, click Apply, then go back and apply the console option. CTRL-F5 and the subsystem hints work together; they are not separate options. "
618381,"You might want to look at the uniq and sort applications. ./yourscript.ksh | sort | uniq BIGBLOCK (FYI, yes, the sort is necessary in this command line, uniq only strips duplicate lines that are immediately after each other) EDIT: Contrary to what has been posted by Aaron Digulla in relation to uniq's commandline options: Given the following input: classjarjarjarbinbinjava BIGBLOCK uniq will output all lines exactly once: classjarbinjava BIGBLOCK uniq -d will output all lines that appear more than once, and it will print them once: jarbin BIGBLOCK uniq -u will output all lines that appear exactly once, and it will print them once: classjava BIGBLOCK ","You might want to look at the uniq and sort applications. ./yourscript.ksh | sort | uniq Given the following input: classjarjarjarbinbinjava BIGBLOCK uniq will output all lines exactly once: classjarbinjava BIGBLOCK uniq -d will output all lines that appear more than once, and it will print them once: jarbin BIGBLOCK uniq -u will output all lines that appear exactly once, and it will print them once: classjava BIGBLOCK ","You might want to look at the uniq and sort applications. ./yourscript.ksh | sort | uniq BIGBLOCK Contrary to what has been posted by Aaron Digulla in relation to uniq's commandline options: Given the following input: classjarjarjarbinbinjava BIGBLOCK uniq will output all lines exactly once: classjarbinjava BIGBLOCK uniq -d will output all lines that appear more than once, and it will print them once: jarbin BIGBLOCK uniq -u will output all lines that appear exactly once, and it will print them once: classjava BIGBLOCK ","You might want to look at the uniq and sort applications. ./yourscript.ksh | sort | uniq (FYI, yes, the sort is necessary in this command line, uniq only strips duplicate lines that are immediately after each other) EDIT: Contrary to what has been posted by Aaron Digulla in relation to uniq's commandline options: Given the following input: classjarjarjarbinbinjava BIGBLOCK uniq will output all lines exactly once: classjarbinjava BIGBLOCK uniq -d will output all lines that appear more than once, and it will print them once: jarbin BIGBLOCK uniq -u will output all lines that appear exactly once, and it will print them once: classjava BIGBLOCK "
1595863,"Try ssh-add, you need ssh-agent to be running and holding your private key (Ok, responding to the updated question, you first run ssh-keygen to generate a public and private key as Jefromi explained. You put the public key on the server. You should use a passphrase, if you don't you have the equivalent of a plain-text password in your private key. But when you do, then you need as a practical matter ssh-agent as explained below.) You want to be running ssh-agent in the background as you log in. Once you log in, the idea is to run ssh-add once and only once, in order to give the agent your passphrase, to decode your key. The agent then just sits in memory with your key unlocked and loaded, ready to use every time you ssh somewhere. All ssh-family commands1 will then consult the agent and automatically be able to use your private key. On OSX (err, macOS), GNOME and KDE systems, ssh-agent is usually launched automatically for you. I will go through the details in case, like me, you also have a Cygwin or other windows environment where this most certainly is not done for you. Start here: man ssh-agent. There are various ways to automatically run the agent. As the man page explains, you can run it so that it is a parent of all your login session's other processes. That way, the environment variables it provides will automatically be in all your shells. When you (later) invoke ssh-add or ssh both will have access to the agent because they all have the environment variables with magic socket pathnames or whatever. Alternatively, you can run the agent as an ordinary child, save the environment settings in a file, and source that file in every shell when it starts. My OSX and Ubuntu systems automatically do the agent launch setup, so all I have to do is run ssh-add once. Try running ssh-add and see if it works, if so, then you just need to do that once per reboot. My Cygwin system needed it done manually, so I did this in my .profile and I have .bashrc source .profile: BIGBLOCK The .agent file is created automatically by the script; it contains the environment variables definitions and exports. The above tries to source the .agent file, and then tries to ps(1) the agent. If it doesn't work it starts an agent and creates a new agent file. You can also just run ssh-add and if it fails start an agent.1. And even local and remote sudo with the right pam extension. ","Try ssh-add, you need ssh-agent to be running and holding your private key Once you log in, the idea is to run ssh-add once and only once, in order to give the agent your passphrase, to decode your key. On OSX (err, macOS), GNOME and KDE systems, ssh-agent is usually launched automatically for you. I will go through the details in case, like me, you also have a Cygwin or other windows environment where this most certainly is not done for you. There are various ways to automatically run the agent. As the man page explains, you can run it so that it is a parent of all your login session's other processes. Alternatively, you can run the agent as an ordinary child, save the environment settings in a file, and source that file in every shell when it starts. My Cygwin system needed it done manually, so I did this in my .profile and I have .bashrc source .profile: BIGBLOCK The .agent file is created automatically by the script; it contains the environment variables definitions and exports. You can also just run ssh-add and if it fails start an agent.1. ","Try ssh-add, you need ssh-agent to be running and holding your private key You put the public key on the server. Once you log in, the idea is to run ssh-add once and only once, in order to give the agent your passphrase, to decode your key. On OSX (err, macOS), GNOME and KDE systems, ssh-agent is usually launched automatically for you. I will go through the details in case, like me, you also have a Cygwin or other windows environment where this most certainly is not done for you. There are various ways to automatically run the agent. As the man page explains, you can run it so that it is a parent of all your login session's other processes. That way, the environment variables it provides will automatically be in all your shells. When you (later) invoke ssh-add or ssh both will have access to the agent because they all have the environment variables with magic socket pathnames or whatever. Alternatively, you can run the agent as an ordinary child, save the environment settings in a file, and source that file in every shell when it starts. My Cygwin system needed it done manually, so I did this in my .profile and I have .bashrc source .profile: BIGBLOCK You can also just run ssh-add and if it fails start an agent.1. ","Try ssh-add, you need ssh-agent to be running and holding your private key You put the public key on the server. Once you log in, the idea is to run ssh-add once and only once, in order to give the agent your passphrase, to decode your key. All ssh-family commands1 will then consult the agent and automatically be able to use your private key. On OSX (err, macOS), GNOME and KDE systems, ssh-agent is usually launched automatically for you. I will go through the details in case, like me, you also have a Cygwin or other windows environment where this most certainly is not done for you. Start here: man ssh-agent. There are various ways to automatically run the agent. As the man page explains, you can run it so that it is a parent of all your login session's other processes. When you (later) invoke ssh-add or ssh both will have access to the agent because they all have the environment variables with magic socket pathnames or whatever. Alternatively, you can run the agent as an ordinary child, save the environment settings in a file, and source that file in every shell when it starts. My Cygwin system needed it done manually, so I did this in my .profile and I have .bashrc source .profile: BIGBLOCK You can also just run ssh-add and if it fails start an agent.1. "
1072178,"You might be needing a cleanup or you might be needing a prune prune Deletes all stale tracking branches under &lt;name>. These stale branches have already been removed from the remote repository referenced by &lt;name>, but are still locally available in ""remotes/&lt;name>"". With --dry-run option, report what branches will be pruned, but do no actually prune them. However, it appears these should have been cleaned up earlier with rm Remove the remote named &lt;name>. All remote tracking branches and configuration settings for the remote             are removed. So it might be you hand-edited your config file and this did not occur, or you have privilege problems. Maybe run that again and see what happens. Advice Context If you take a look in the revision logs,  you'll note I suggested more ""correct"" techniques, which for whatever reason didn't want to work on their repository. I suspected the OP had done something that left their tree in an inconsistent state that caused it to behave a bit strangely, and git gc was required to fix up the left behind cruft. Usually  git branch -rd origin/badbranch is sufficient for nuking a local tracking branch , or git push origin :badbranch for nuking a remote branch, and usually you will never need to call git gc ","prune Deletes all stale tracking branches under &lt;name>. rm Remove the remote named &lt;name>. So it might be you hand-edited your config file and this did not occur, or you have privilege problems. I suspected the OP had done something that left their tree in an inconsistent state that caused it to behave a bit strangely, and git gc was required to fix up the left behind cruft. Usually  git branch -rd origin/badbranch is sufficient for nuking a local tracking branch , or git push origin :badbranch for nuking a remote branch, and usually you will never need to call git gc ","You might be needing a cleanup prune Deletes all stale tracking branches under &lt;name>. rm Remove the remote named &lt;name>. All remote tracking branches and configuration settings for the remote             are removed. So it might be you hand-edited your config file and this did not occur, or you have privilege problems. I suspected the OP had done something that left their tree in an inconsistent state that caused it to behave a bit strangely, and git gc was required to fix up the left behind cruft. Usually  git branch -rd origin/badbranch is sufficient for nuking a local tracking branch , or git push origin :badbranch for nuking a remote branch, and usually you will never need to call git gc ","prune Deletes all stale tracking branches under &lt;name>. These stale branches have already been removed from the remote repository referenced by &lt;name>, but are still locally available in ""remotes/&lt;name>"". With --dry-run option, report what branches will be pruned, but do no actually prune them. However, it appears these should have been cleaned up earlier with rm Remove the remote named &lt;name>. If you take a look in the revision logs,  you'll note I suggested more ""correct"" techniques, which for whatever reason didn't want to work on their repository. I suspected the OP had done something that left their tree in an inconsistent state that caused it to behave a bit strangely, and git gc was required to fix up the left behind cruft. Usually  git branch -rd origin/badbranch is sufficient for nuking a local tracking branch , or git push origin :badbranch for nuking a remote branch, and usually you will never need to call git gc "
1749237,"This is really strange... Once set, the default Charset is cached and it isn't changed while the class is in memory. Setting the ""file.encoding"" property with System.setProperty(""file.encoding"", ""Latin-1""); does nothing. Every time Charset.defaultCharset() is called it returns the cached charset. Here are my results: I'm using JVM 1.6 though. (update) Ok. I did reproduce your bug with JVM 1.5. Looking at the source code of 1.5, the cached default charset isn't being set. I don't know if this is a bug or not but 1.6 changes this implementation and uses the cached charset: JVM 1.5: JVM 1.6: When you set the file encoding to file.encoding=Latin-1 the next time you call Charset.defaultCharset(), what happens is, because the cached default charset isn't set, it will try to find the appropriate charset for the name Latin-1. This name isn't found, because it's incorrect, and returns the default UTF-8. As for why the IO classes such as OutputStreamWriter return an unexpected result, the implementation of sun.nio.cs.StreamEncoder (witch is used by these IO classes) is different as well for JVM 1.5 and JVM 1.6. The JVM 1.6 implementation is based in the Charset.defaultCharset() method to get the default encoding, if one is not provided to IO classes. The JVM 1.5 implementation uses a different method Converters.getDefaultEncodingName(); to get the default charset. This method uses it's own cache of the default charset that is set upon JVM initialization: JVM 1.6: JVM 1.5: But I agree with the comments. You shouldn't rely on this property. It's an implementation detail. ","I don't know if this is a bug or not but 1.6 changes this implementation and uses the cached charset: JVM 1.5: JVM 1.6: When you set the file encoding to file.encoding=Latin-1 the next time you call Charset.defaultCharset(), what happens is, because the cached default charset isn't set, it will try to find the appropriate charset for the name Latin-1. This name isn't found, because it's incorrect, and returns the default UTF-8. As for why the IO classes such as OutputStreamWriter return an unexpected result, the implementation of sun.nio.cs.StreamEncoder (witch is used by these IO classes) is different as well for JVM 1.5 and JVM 1.6. The JVM 1.6 implementation is based in the Charset.defaultCharset() method to get the default encoding, if one is not provided to IO classes. JVM 1.6: JVM 1.5: But I agree with the comments. ","Ok. I don't know if this is a bug or not but 1.6 changes this implementation and uses the cached charset: JVM 1.5: JVM 1.6: When you set the file encoding to file.encoding=Latin-1 the next time you call Charset.defaultCharset(), what happens is, because the cached default charset isn't set, it will try to find the appropriate charset for the name Latin-1. This name isn't found, because it's incorrect, and returns the default UTF-8. As for why the IO classes such as OutputStreamWriter return an unexpected result, the implementation of sun.nio.cs.StreamEncoder (witch is used by these IO classes) is different as well for JVM 1.5 and JVM 1.6. The JVM 1.6 implementation is based in the Charset.defaultCharset() method to get the default encoding, if one is not provided to IO classes. The JVM 1.5 implementation uses a different method Converters.getDefaultEncodingName(); to get the default charset. This method uses it's own cache of the default charset that is set upon JVM initialization: JVM 1.6: JVM 1.5: ","Here are my results: (update) Ok. I don't know if this is a bug or not but 1.6 changes this implementation and uses the cached charset: JVM 1.5: JVM 1.6: When you set the file encoding to file.encoding=Latin-1 the next time you call Charset.defaultCharset(), what happens is, because the cached default charset isn't set, it will try to find the appropriate charset for the name Latin-1. This name isn't found, because it's incorrect, and returns the default UTF-8. As for why the IO classes such as OutputStreamWriter return an unexpected result, the implementation of sun.nio.cs.StreamEncoder (witch is used by these IO classes) is different as well for JVM 1.5 and JVM 1.6. The JVM 1.6 implementation is based in the Charset.defaultCharset() method to get the default encoding, if one is not provided to IO classes. JVM 1.6: JVM 1.5: It's an implementation detail. "
206066,"from http://ora-12154.ora-code.com ORA-12154:  TNS:could not resolve the connect identifier specified Cause:    A connection to a database or other service was requested using a connect identifier, and the connect identifier specified could not be resolved into a connect descriptor using one of the naming methods configured. For example, if the type of connect identifier used was a net service name then the net service name could not be found in a naming method repository, or the repository could not be located or reached. Action: If you are using local naming (TNSNAMES.ORA file): Make sure that ""TNSNAMES"" is listed as one of the values of the NAMES.DIRECTORY_PATH parameter in the Oracle Net profile (SQLNET.ORA) Verify that a TNSNAMES.ORA file exists and is in the proper directory and is accessible. Check that the net service name used as the connect identifier exists in the TNSNAMES.ORA file. Make sure there are no syntax errors anywhere in the TNSNAMES.ORA file. Look for unmatched parentheses or stray characters. Errors in a TNSNAMES.ORA file may make it unusable. If you are using directory naming: Verify that ""LDAP"" is listed as one of the values of the NAMES.DIRETORY_PATH parameter in the Oracle Net profile (SQLNET.ORA). Verify that the LDAP directory server is up and that it is accessible. Verify that the net service name or database name used as the connect identifier is configured in the directory. Verify that the default context being used is correct by specifying a fully qualified net service name or a full LDAP DN as the connect identifier If you are using easy connect naming: Verify that ""EZCONNECT"" is listed as one of the values of the NAMES.DIRETORY_PATH parameter in the Oracle Net profile (SQLNET.ORA). Make sure the host, port and service name specified are correct. Try enclosing the connect identifier in quote marks. See the Oracle Net Services Administrators Guide or the Oracle operating system specific guide for more information on naming. ","ORA-12154:  TNS:could not resolve the connect identifier specified Cause:    A connection to a database or other service was requested using a connect identifier, and the connect identifier specified could not be resolved into a connect descriptor using one of the naming methods configured. For example, if the type of connect identifier used was a net service name then the net service name could not be found in a naming method repository, or the repository could not be located or reached. Action: If you are using local naming (TNSNAMES.ORA file): Make sure that ""TNSNAMES"" is listed as one of the values of the NAMES.DIRECTORY_PATH parameter in the Oracle Net profile (SQLNET.ORA) Verify that a TNSNAMES.ORA file exists and is in the proper directory and is accessible. Check that the net service name used as the connect identifier exists in the TNSNAMES.ORA file. Make sure there are no syntax errors anywhere in the TNSNAMES.ORA file. If you are using directory naming: Verify that ""LDAP"" is listed as one of the values of the NAMES.DIRETORY_PATH parameter in the Oracle Net profile (SQLNET.ORA). Verify that the LDAP directory server is up and that it is accessible. Verify that the net service name or database name used as the connect identifier is configured in the directory. Verify that the default context being used is correct by specifying a fully qualified net service name or a full LDAP DN as the connect identifier If you are using easy connect naming: Verify that ""EZCONNECT"" is listed as one of the values of the NAMES.DIRETORY_PATH parameter in the Oracle Net profile (SQLNET.ORA). Make sure the host, port and service name specified are correct. Try enclosing the connect identifier in quote marks. ","from http://ora-12154.ora-code.com ORA-12154:  TNS:could not resolve the connect identifier specified Cause:    A connection to a database or other service was requested using a connect identifier, and the connect identifier specified could not be resolved into a connect descriptor using one of the naming methods configured. For example, if the type of connect identifier used was a net service name then the net service name could not be found in a naming method repository, or the repository could not be located or reached. Action: If you are using local naming (TNSNAMES.ORA file): Make sure that ""TNSNAMES"" is listed as one of the values of the NAMES.DIRECTORY_PATH parameter in the Oracle Net profile (SQLNET.ORA) Verify that a TNSNAMES.ORA file exists and is in the proper directory and is accessible. Check that the net service name used as the connect identifier exists in the TNSNAMES.ORA file. Make sure there are no syntax errors anywhere in the TNSNAMES.ORA file. If you are using directory naming: Verify that ""LDAP"" is listed as one of the values of the NAMES.DIRETORY_PATH parameter in the Oracle Net profile (SQLNET.ORA). Verify that the LDAP directory server is up and that it is accessible. Verify that the net service name or database name used as the connect identifier is configured in the directory. Verify that the default context being used is correct by specifying a fully qualified net service name or a full LDAP DN as the connect identifier If you are using easy connect naming: Verify that ""EZCONNECT"" is listed as one of the values of the NAMES.DIRETORY_PATH parameter in the Oracle Net profile (SQLNET.ORA). Make sure the host, port and service name specified are correct. Try enclosing the connect identifier in quote marks. See the Oracle Net Services Administrators Guide or the Oracle operating system specific guide for more information on naming. ","from http://ora-12154.ora-code.com ORA-12154:  TNS:could not resolve the connect identifier specified Cause:    A connection to a database or other service was requested using a connect identifier, and the connect identifier specified could not be resolved into a connect descriptor using one of the naming methods configured. For example, if the type of connect identifier used was a net service name then the net service name could not be found in a naming method repository, or the repository could not be located or reached. Action: If you are using local naming (TNSNAMES.ORA file): Make sure that ""TNSNAMES"" is listed as one of the values of the NAMES.DIRECTORY_PATH parameter in the Oracle Net profile (SQLNET.ORA) Verify that a TNSNAMES.ORA file exists and is in the proper directory and is accessible. Check that the net service name used as the connect identifier exists in the TNSNAMES.ORA file. Make sure there are no syntax errors anywhere in the TNSNAMES.ORA file. Errors in a TNSNAMES.ORA file may make it unusable. If you are using directory naming: Verify that ""LDAP"" is listed as one of the values of the NAMES.DIRETORY_PATH parameter in the Oracle Net profile (SQLNET.ORA). Verify that the LDAP directory server is up and that it is accessible. Verify that the net service name or database name used as the connect identifier is configured in the directory. Verify that the default context being used is correct by specifying a fully qualified net service name or a full LDAP DN as the connect identifier If you are using easy connect naming: Verify that ""EZCONNECT"" is listed as one of the values of the NAMES.DIRETORY_PATH parameter in the Oracle Net profile (SQLNET.ORA). Make sure the host, port and service name specified are correct. Try enclosing the connect identifier in quote marks. See the Oracle Net Services Administrators Guide or the Oracle operating system specific guide for more information on naming. "
2753582,"Since Oracle 9i there are two ways or declaring a directory for use with UTL_FILE. The older way is to set the INIT.ORA parameter UTL_FILE_DIR. We have to restart the database for a change to take affect. The value can like any other PATH variable; it accepts wildcards. Using this approach means passing the directory path... The alternative approach is to declare a directory object. Directory objects require the exact file path, and don't accept wildcards. In this approach we pass the directory object name... The UTL_FILE_DIR is deprecated because it is inherently insecure - all users have access to all the OS directories specified in the path, whereas read and write privileges can de granted discretely to individual users. Also, with Directory objects we can be add, remove or change directories without bouncing the database. In either case, the oracle OS user must have read and/or write privileges on the OS directory. In case it isn't obvious, this means the directory must be visible from the database server. So we cannot use either approach to expose a directory on our local PC to a process running on a remote database server. Files must be uploaded to the database server, or a shared network drive. If the oracle OS user does not have the appropriate privileges on the OS directory, or if the path specified in the database does not match to an actual path, the program will hurl this exception: The OERR text for this error is pretty clear: ","Since Oracle 9i there are two ways or declaring a directory for use with UTL_FILE. The older way is to set the INIT.ORA parameter UTL_FILE_DIR. The value can like any other PATH variable; it accepts wildcards. The alternative approach is to declare a directory object. Directory objects require the exact file path, and don't accept wildcards. In either case, the oracle OS user must have read and/or write privileges on the OS directory. So we cannot use either approach to expose a directory on our local PC to a process running on a remote database server. The OERR text for this error is pretty clear: ","Since Oracle 9i there are two ways or declaring a directory for use with UTL_FILE. The older way is to set the INIT.ORA parameter UTL_FILE_DIR. The value can like any other PATH variable; it accepts wildcards. Using this approach means passing the directory path... The alternative approach is to declare a directory object. Directory objects require the exact file path, and don't accept wildcards. In this approach we pass the directory object name... In either case, the oracle OS user must have read and/or write privileges on the OS directory. In case it isn't obvious, this means the directory must be visible from the database server. So we cannot use either approach to expose a directory on our local PC to a process running on a remote database server. ","Since Oracle 9i there are two ways or declaring a directory for use with UTL_FILE. The older way is to set the INIT.ORA parameter UTL_FILE_DIR. The value can like any other PATH variable; it accepts wildcards. The alternative approach is to declare a directory object. Directory objects require the exact file path, and don't accept wildcards. In this approach we pass the directory object name... In either case, the oracle OS user must have read and/or write privileges on the OS directory. In case it isn't obvious, this means the directory must be visible from the database server. So we cannot use either approach to expose a directory on our local PC to a process running on a remote database server. If the oracle OS user does not have the appropriate privileges on the OS directory, or if the path specified in the database does not match to an actual path, the program will hurl this exception: The OERR text for this error is pretty clear: "
2876684,"Here's what I had to do to get this working. This means: Custom UserNamePasswordValidator (no need for a Windows account, SQLServer or ActiveDirectory -- your UserNamePasswordValidator could have username &amp; password hardcoded, or read it from a text file, MySQL or whatever). https IIS7 .net 4.0 My site is managed through DotNetPanel. It has 3 security options for virtual directories: Allow Anonymous Access Enable Basic Authentication Enable Integrated Windows Authentication Only ""Allow Anonymous Access"" is needed (although, that, by itself wasn't enough). Setting BIGBLOCK Didn't make a difference in my case. However, using this binding worked: BIGBLOCK ","My site is managed through DotNetPanel. It has 3 security options for virtual directories: Enable Integrated Windows Authentication Setting However, using this binding worked: BIGBLOCK ","Custom UserNamePasswordValidator (no need for a Windows account, SQLServer or ActiveDirectory -- your UserNamePasswordValidator could have username &amp; password hardcoded, or read it from a text file, MySQL or whatever). IIS7 My site is managed through DotNetPanel. It has 3 security options for virtual directories: Allow Anonymous Access Enable Integrated Windows Authentication However, using this binding worked: BIGBLOCK ","Custom UserNamePasswordValidator (no need for a Windows account, SQLServer or ActiveDirectory -- your UserNamePasswordValidator could have username &amp; password hardcoded, or read it from a text file, MySQL or whatever). My site is managed through DotNetPanel. It has 3 security options for virtual directories: Enable Integrated Windows Authentication Only ""Allow Anonymous Access"" is needed (although, that, by itself wasn't enough). BIGBLOCK Didn't make a difference in my case. However, using this binding worked: BIGBLOCK "
1745709,"There is a semantical difference a performance difference between the two. Semantical Difference: FirstOrDefault returns a first item of potentially multiple (or default if none exists). SingleOrDefault assumes that there is a single item and returns it (or default if none exists). Multiple items are a violation of contract, an exception is thrown. Performance Difference FirstOrDefault is usually faster, it iterates until it finds the element and only has to iterate the whole enumerable when it doesn't find it. In many cases, there is a high probability to find an item. SingleOrDefault needs to check if there is only one element and therefore always iterates the whole enumerable. To be precise, it iterates until it finds a second element and throws an exception. But in most cases, there is no second element. Conclusion Use FirstOrDefault if you don't care how many items there are or when you can't afford checking uniqueness (e.g. in a very large collection). When you check uniqueness on adding the items to the collection, it might be too expensive to check it again when searching for those items. Use SingleOrDefault if you don't have to care about performance too much and want to make sure that the assumption of a single item is clear to the reader and checked at runtime. In practice, you use First / FirstOrDefault often even in cases when you assume a single item, to improve performance. You should still remember that Single / SingleOrDefault can improve readability (because it states the assumption of a single item) and stability (because it checks it) and use it appropriately. ","Semantical Difference: FirstOrDefault returns a first item of potentially multiple (or default if none exists). SingleOrDefault assumes that there is a single item and returns it (or default if none exists). Performance Difference FirstOrDefault is usually faster, it iterates until it finds the element and only has to iterate the whole enumerable when it doesn't find it. In many cases, there is a high probability to find an item. Conclusion Use FirstOrDefault if you don't care how many items there are or when you can't afford checking uniqueness (e.g. in a very large collection). Use SingleOrDefault if you don't have to care about performance too much and want to make sure that the assumption of a single item is clear to the reader and checked at runtime. In practice, you use First / FirstOrDefault often even in cases when you assume a single item, to improve performance. ","a semantical difference Semantical Difference: FirstOrDefault returns a first item of potentially multiple (or default if none exists). SingleOrDefault assumes that there is a single item and returns it (or default if none exists). Performance Difference FirstOrDefault is usually faster, it iterates until it finds the element and only has to iterate the whole enumerable when it doesn't find it. In many cases, there is a high probability to find an item. SingleOrDefault needs to check if there is only one element and therefore always iterates the whole enumerable. Conclusion Use FirstOrDefault if you don't care how many items there are or when you can't afford checking uniqueness (e.g. Use SingleOrDefault if you don't have to care about performance too much and want to make sure that the assumption of a single item is clear to the reader and checked at runtime. In practice, you use First / FirstOrDefault often even in cases when you assume a single item, to improve performance. You should still remember that Single / SingleOrDefault can improve readability (because it states the assumption of a single item) and stability (because it checks it) and use it appropriately. ","a semantical difference a performance difference Semantical Difference: FirstOrDefault returns a first item of potentially multiple (or default if none exists). SingleOrDefault assumes that there is a single item and returns it (or default if none exists). Performance Difference FirstOrDefault is usually faster, it iterates until it finds the element and only has to iterate the whole enumerable when it doesn't find it. In many cases, there is a high probability to find an item. SingleOrDefault needs to check if there is only one element and therefore always iterates the whole enumerable. Conclusion Use FirstOrDefault if you don't care how many items there are or when you can't afford checking uniqueness (e.g. in a very large collection). Use SingleOrDefault if you don't have to care about performance too much and want to make sure that the assumption of a single item is clear to the reader and checked at runtime. In practice, you use First / FirstOrDefault often even in cases when you assume a single item, to improve performance. "
2125045,"A common misunderstanding among starters is that they think that the call of a forward(), sendRedirect(), or sendError() would magically exit and ""jump"" out of the method block, hereby ignoring the remnant of the code. For example: BIGBLOCK This is thus actually not true. They do certainly not behave differently than any other Java methods (expect of System#exit() of course). When the someCondition in above example is true and you're thus calling forward() after sendRedirect() or sendError() on the same request/response, then the chance is big that you will get the exception: java.lang.IllegalStateException: Cannot forward after response has been committed If the if statement calls a forward() and you're afterwards calling sendRedirect() or sendError(), then below exception will be thrown: java.lang.IllegalStateException: Cannot call sendRedirect() after the response has been committed To fix this, you need either to add a return; statement afterwards BIGBLOCK ... or to introduce an else block. BIGBLOCK To naildown the root cause in your code, just search for any line which calls a forward(), sendRedirect() or sendError() without exiting the method block or skipping the remnant of the code. This can be inside the same servlet before the particular code line, but also in any servlet or filter which was been called before the particular servlet. In case of sendError(), if your sole purpose is to set the response status, use setStatus() instead. Another probable cause is that the servlet writes to the response while a forward() will be called, or has been called in the very same method. BIGBLOCK The response buffer size defaults in most server to 2KB, so if you write more than 2KB to it, then it will be committed and forward() will fail the same way: java.lang.IllegalStateException: Cannot forward after response has been committed Solution is obvious, just don't write to the response in the servlet. That's the responsibility of the JSP. You just set a request attribute like so request.setAttribute(""data"", ""some string"") and then print it in JSP like so ${data}. See also our Servlets wiki page to learn how to use Servlets the right way. See also: What exactly does &quot;Response already committed&quot; mean? How to handle exceptions then? Unrelated to your concrete problem, your JDBC code is leaking resources. Fix that as well. For hints, see also How often should Connection, Statement and ResultSet be closed in JDBC? ","A common misunderstanding among starters is that they think that the call of a forward(), sendRedirect(), or sendError() would magically exit and ""jump"" out of the method block, hereby ignoring the remnant of the code. If the if statement calls a forward() and you're afterwards calling sendRedirect() or sendError(), then below exception will be thrown: java.lang.IllegalStateException: Cannot call sendRedirect() after the response has been committed To fix this, you need either to add a return; statement afterwards BIGBLOCK ... or to introduce an else block. BIGBLOCK To naildown the root cause in your code, just search for any line which calls a forward(), sendRedirect() or sendError() without exiting the method block or skipping the remnant of the code. Another probable cause is that the servlet writes to the response while a forward() will be called, or has been called in the very same method. Solution is obvious, just don't write to the response in the servlet. See also: ","A common misunderstanding among starters is that they think that the call of a forward(), sendRedirect(), or sendError() would magically exit and ""jump"" out of the method block, hereby ignoring the remnant of the code. If the if statement calls a forward() and you're afterwards calling sendRedirect() or sendError(), then below exception will be thrown: java.lang.IllegalStateException: Cannot call sendRedirect() after the response has been committed To fix this, you need either to add a return; statement afterwards BIGBLOCK ... or to introduce an else block. BIGBLOCK To naildown the root cause in your code, just search for any line which calls a forward(), sendRedirect() or sendError() without exiting the method block or skipping the remnant of the code. This can be inside the same servlet before the particular code line, but also in any servlet or filter which was been called before the particular servlet. Another probable cause is that the servlet writes to the response while a forward() will be called, or has been called in the very same method. BIGBLOCK Solution is obvious, just don't write to the response in the servlet. That's the responsibility of the JSP. ","A common misunderstanding among starters is that they think that the call of a forward(), sendRedirect(), or sendError() would magically exit and ""jump"" out of the method block, hereby ignoring the remnant of the code. If the if statement calls a forward() and you're afterwards calling sendRedirect() or sendError(), then below exception will be thrown: java.lang.IllegalStateException: Cannot call sendRedirect() after the response has been committed To fix this, you need either to add a return; statement afterwards BIGBLOCK ... or to introduce an else block. BIGBLOCK To naildown the root cause in your code, just search for any line which calls a forward(), sendRedirect() or sendError() without exiting the method block or skipping the remnant of the code. Another probable cause is that the servlet writes to the response while a forward() will be called, or has been called in the very same method. The response buffer size defaults in most server to 2KB, so if you write more than 2KB to it, then it will be committed and forward() will fail the same way: java.lang.IllegalStateException: Cannot forward after response has been committed Solution is obvious, just don't write to the response in the servlet. See also: Unrelated to your concrete problem, your JDBC code is leaking resources. "
21656,"Just follow closely the chain of events. Grab 10 Grab 20 Grab 30 Grab EOF Look at the second-to-last iteration. You grabbed 30, then carried on to check for EOF. You haven't reached EOF because the EOF mark hasn't been read yet (""binarically"" speaking, its conceptual location is just after the 30 line). Therefore you carry on to the next iteration. x is still 30 from previous iteration. Now you read from the stream and you get EOF. x remains 30 and the ios::eofbit is raised. You output to stderr x (which is 30, just like in the previous iteration). Next you check for EOF in the loop condition, and this time you're out of the loop. Try this: BIGBLOCK By the way, there is another bug in your code. Did you ever try to run it on an empty file? The behaviour you get is for the exact same reason. ","Try this: BIGBLOCK By the way, there is another bug in your code. Did you ever try to run it on an empty file? The behaviour you get is for the exact same reason. ","Grab 10 You grabbed 30, then carried on to check for EOF. Try this: BIGBLOCK By the way, there is another bug in your code. Did you ever try to run it on an empty file? The behaviour you get is for the exact same reason. ","Grab 10 Grab 30 You haven't reached EOF because the EOF mark hasn't been read yet (""binarically"" speaking, its conceptual location is just after the 30 line). x is still 30 from previous iteration. Try this: BIGBLOCK By the way, there is another bug in your code. Did you ever try to run it on an empty file? "
295590,"I was thinking about the horrible times I've spent in Numerical Analysis course. And then I remember, there was this function circling around the 'net from the Quake Source code: BIGBLOCK Which basically calculates a square root, using Newton's approximation function (cant remember the exact name). It should be usable and might even be faster, it's from one of the phenomenal id software's game! It's written in C++ but it should not be too hard to reuse the same technique in Java once you get the idea: I originally found it at: http://www.codemaestro.com/reviews/9 Newton's method explained at wikipedia: http://en.wikipedia.org/wiki/Newton%27s_method You can follow the link for more explanation of how it works, but if you don't care much, then this is roughly what I remember from reading the blog and from taking the Numerical Analysis course: the * (long*) &amp;y is basically a fast convert-to-long function so integer operations can be applied on the raw bytes. the 0x5f3759df - (i &gt;&gt; 1); line is a pre-calculated seed value for the approximation function. the * (float*) &amp;i converts the value back to floating point. the y  = y * ( threehalfs - ( x2 * y * y ) ) line bascially iterates the value over the function again. The approximation function gives more precise values the more you iterate the function over the result. In Quake's case, one iteration is ""good enough"", but if it wasn't for you... then you could add as much iteration as you need. This should be faster because it reduces the number of division operations done in naive square rooting down to a simple divide by 2 (actually a * 0.5F multiply operation) and replace it with a few fixed number of multiplication operations instead. ","And then I remember, there was this function circling around the 'net from the Quake Source code: BIGBLOCK Which basically calculates a square root, using Newton's approximation function (cant remember the exact name). It should be usable and might even be faster, it's from one of the phenomenal id software's game! I originally found it at: http://www.codemaestro.com/reviews/9 This should be faster because it reduces the number of division operations done in naive square rooting down to a simple divide by 2 (actually a * 0.5F multiply operation) and replace it with a few fixed number of multiplication operations instead. ","And then I remember, there was this function circling around the 'net from the Quake Source code: BIGBLOCK Which basically calculates a square root, using Newton's approximation function (cant remember the exact name). It should be usable and might even be faster, it's from one of the phenomenal id software's game! I originally found it at: http://www.codemaestro.com/reviews/9 Newton's method explained at wikipedia: http://en.wikipedia.org/wiki/Newton%27s_method In Quake's case, one iteration is ""good enough"", but if it wasn't for you... then you could add as much iteration as you need. This should be faster because it reduces the number of division operations done in naive square rooting down to a simple divide by 2 (actually a * 0.5F multiply operation) and replace it with a few fixed number of multiplication operations instead. ","And then I remember, there was this function circling around the 'net from the Quake Source code: BIGBLOCK Which basically calculates a square root, using Newton's approximation function (cant remember the exact name). It should be usable and might even be faster, it's from one of the phenomenal id software's game! I originally found it at: http://www.codemaestro.com/reviews/9 You can follow the link for more explanation of how it works, but if you don't care much, then this is roughly what I remember from reading the blog and from taking the Numerical Analysis course: the 0x5f3759df - (i &gt;&gt; 1); line is a pre-calculated seed value for the approximation function. the * (float*) &amp;i converts the value back to floating point. This should be faster because it reduces the number of division operations done in naive square rooting down to a simple divide by 2 (actually a * 0.5F multiply operation) and replace it with a few fixed number of multiplication operations instead. "
424936,"I figured out a method that works ~35% faster than your 6bits+Carmack+sqrt code, at least with my CPU (x86) and programming language (C/C++). Your results may vary, especially because I don't know how the Java factor will play out. My approach is threefold: First, filter out obvious answers. This includes negative numbers and looking at the last 4 bits. (I found looking at the last six didn't help.) I also answer yes for 0. (In reading the code below, note that my input is int64 x. )if( x &lt; 0 || (x&2) || ((x & 7) == 5) || ((x & 11) == 8) )    return false;if( x == 0 )    return true; BIGBLOCK Next, check if it's a square modulo 255 = 3 * 5 * 17. Because that's a product of three distinct primes, only about 1/8 of the residues mod 255 are squares. However, in my experience, calling the modulo operator (%) costs more than the benefit one gets, so I use bit tricks involving 255 = 2^8-1 to compute the residue. (For better or worse, I am not using the trick of reading individual bytes out of a word, only bitwise-and and shifts. )int64 y = x;y = (y & 4294967295LL) + (y &gt;&gt; 32); y = (y & 65535) + (y &gt;&gt; 16);y = (y & 255) + ((y &gt;&gt; 8) & 255) + (y &gt;&gt; 16);// At this point, y is between 0 and 511. More code can reduce it farther. BIGBLOCK To actually check if the residue is a square, I look up the answer in a precomputed table.if( bad255[y] )    return false;// However, I just use a table of size 512 BIGBLOCK Finally, try to compute the square root using a method similar to Hensel's lemma. (I don't think it's applicable directly, but it works with some modifications.) Before doing that, I divide out all powers of 2 with a binary search:if((x & 4294967295LL) == 0)    x &gt;&gt;= 32;if((x & 65535) == 0)    x &gt;&gt;= 16;if((x & 255) == 0)    x &gt;&gt;= 8;if((x & 15) == 0)    x &gt;&gt;= 4;if((x & 3) == 0)    x &gt;&gt;= 2; BIGBLOCK At this point, for our number to be a square, it must be 1 mod 8.if((x & 7) != 1)    return false; BIGBLOCK The basic structure of Hensel's lemma is the following. (Note: untested code; if it doesn't work, try t=2 or 8. )int64 t = 4, r = 1;t &lt;&lt;= 1; r += ((x - r * r) & t) &gt;&gt; 1;t &lt;&lt;= 1; r += ((x - r * r) & t) &gt;&gt; 1;t &lt;&lt;= 1; r += ((x - r * r) & t) &gt;&gt; 1;// Repeat until t is 2^33 or so. Use a loop if you want. BIGBLOCK The idea is that at each iteration, you add one bit onto r, the ""current"" square root of x; each square root is accurate modulo a larger and larger power of 2, namely t/2. At the end, r and t/2-r will be square roots of x modulo t/2. (Note that if r is a square root of x, then so is -r.  This is true even modulo numbers, but beware, modulo some numbers, things can have even more than 2 square roots; notably, this includes powers of 2.) Because our actual square root is less than 2^32, at that point we can actually just check if r or t/2-r are real square roots. In my actual code, I use the following modified loop:int64 r, t, z;r = start[(x &gt;&gt; 3) & 1023];do {    z = x - r * r;    if( z == 0 )        return true;    if( z &lt; 0 )        return false;    t = z & (-z);    r += (z & t) &gt;&gt; 1;    if( r &gt; (t &gt;&gt; 1) )        r = t - r;} while( t &lt;= (1LL &lt;&lt; 33) ); BIGBLOCK The speedup here is obtained in three ways: precomputed start value (equivalent to ~10 iterations of the loop), earlier exit of the loop, and skipping some t values. For the last part, I look at z = r - x * x, and set t to be the largest power of 2 dividing z with a bit trick. This allows me to skip t values that wouldn't have affected the value of r anyway. The precomputed start value in my case picks out the ""smallest positive"" square root modulo 8192. Even if this code doesn't work faster for you, I hope you enjoy some of the ideas it contains. Complete, tested code follows, including the precomputed tables. BIGBLOCK ","I figured out a method that works ~35% faster than your 6bits+Carmack+sqrt code, at least with my CPU (x86) and programming language (C/C++). First, filter out obvious answers. This includes negative numbers and looking at the last 4 bits. Next, check if it's a square modulo 255 = 3 * 5 * 17. Because that's a product of three distinct primes, only about 1/8 of the residues mod 255 are squares. More code can reduce it farther. Finally, try to compute the square root using a method similar to Hensel's lemma. Complete, tested code follows, including the precomputed tables. BIGBLOCK ","I figured out a method that works ~35% faster than your 6bits+Carmack+sqrt code, at least with my CPU (x86) and programming language (C/C++). First, filter out obvious answers. This includes negative numbers and looking at the last 4 bits. Next, check if it's a square modulo 255 = 3 * 5 * 17. Because that's a product of three distinct primes, only about 1/8 of the residues mod 255 are squares. Finally, try to compute the square root using a method similar to Hensel's lemma. (I don't think it's applicable directly, but it works with some modifications.) At the end, r and t/2-r will be square roots of x modulo t/2. This allows me to skip t values that wouldn't have affected the value of r anyway. Complete, tested code follows, including the precomputed tables. BIGBLOCK ","I figured out a method that works ~35% faster than your 6bits+Carmack+sqrt code, at least with my CPU (x86) and programming language (C/C++). First, filter out obvious answers. This includes negative numbers and looking at the last 4 bits. (I found looking at the last six didn't help.) I also answer yes for 0. Next, check if it's a square modulo 255 = 3 * 5 * 17. Because that's a product of three distinct primes, only about 1/8 of the residues mod 255 are squares. Finally, try to compute the square root using a method similar to Hensel's lemma. BIGBLOCK The precomputed start value in my case picks out the ""smallest positive"" square root modulo 8192. Complete, tested code follows, including the precomputed tables. BIGBLOCK "
634494,"The sqrt call is not perfectly accurate, as has been mentioned, but it's interesting and instructive that it doesn't blow away the other answers in terms of speed. After all, the sequence of assembly language instructions for a sqrt is tiny. Intel has a hardware instruction, which isn't used by Java I believe because it doesn't conform to IEEE. So why is it slow? Because Java is actually calling a C routine through JNI, and it's actually slower to do so than to call a Java subroutine, which itself is slower than doing it inline. This is very annoying, and Java should have come up with a better solution, ie building in floating point library calls if necessary. Oh well. In C++, I suspect all the complex alternatives would lose on speed, but I haven't checked them all.What I did, and what Java people will find usefull, is a simple hack, an extension of the special case testing suggested by A. Rex. Use a single long value as a bit array, which isn't bounds checked. That way, you have 64 bit boolean lookup. BIGBLOCK The routine isPerfectSquare5 runs in about 1/3 the time on my core2 duo machine. I suspect that further tweaks along the same lines could reduce the time further on average, but every time you check, you are trading off more testing for more eliminating, so you can't go too much farther on that road. Certainly, rather than having a separate test for negative, you could check the high 6 bits the same way. Note that all I'm doing is eliminating possible squares, but when I have a potential case I have to call the original, inlined isPerfectSquare. The init2 routine is called once to initialize the static values of pp1 and pp2.Note that in my implementation in C++, I'm using unsigned long long, so since you're signed, you'd have to use the >>> operator. There is no intrinsic need to bounds check the array, but Java's optimizer has to figure this stuff out pretty quickly, so I don't blame them for that. ","The sqrt call is not perfectly accurate, as has been mentioned, but it's interesting and instructive that it doesn't blow away the other answers in terms of speed. So why is it slow? Because Java is actually calling a C routine through JNI, and it's actually slower to do so than to call a Java subroutine, which itself is slower than doing it inline. Oh well. In C++, I suspect all the complex alternatives would lose on speed, but I haven't checked them all.What I did, and what Java people will find usefull, is a simple hack, an extension of the special case testing suggested by A. Rex. ","The sqrt call is not perfectly accurate, as has been mentioned, but it's interesting and instructive that it doesn't blow away the other answers in terms of speed. So why is it slow? Because Java is actually calling a C routine through JNI, and it's actually slower to do so than to call a Java subroutine, which itself is slower than doing it inline. This is very annoying, and Java should have come up with a better solution, ie building in floating point library calls if necessary. In C++, I suspect all the complex alternatives would lose on speed, but I haven't checked them all.What I did, and what Java people will find usefull, is a simple hack, an extension of the special case testing suggested by A. Rex. BIGBLOCK The routine isPerfectSquare5 runs in about 1/3 the time on my core2 duo machine. ","The sqrt call is not perfectly accurate, as has been mentioned, but it's interesting and instructive that it doesn't blow away the other answers in terms of speed. After all, the sequence of assembly language instructions for a sqrt is tiny. So why is it slow? Because Java is actually calling a C routine through JNI, and it's actually slower to do so than to call a Java subroutine, which itself is slower than doing it inline. This is very annoying, and Java should have come up with a better solution, ie building in floating point library calls if necessary. Oh well. In C++, I suspect all the complex alternatives would lose on speed, but I haven't checked them all.What I did, and what Java people will find usefull, is a simple hack, an extension of the special case testing suggested by A. Rex. The init2 routine is called once to initialize the static values of pp1 and pp2.Note that in my implementation in C++, I'm using unsigned long long, so since you're signed, you'd have to use the >>> operator. "
331555,"To avoid this error you could either: Load the assembly dynamically, or Sign the third-party assembly. You will find instructions on signing third-party assemblies in .NET-fu: Signing an Unsigned Assembly (Without Delay Signing). Signing Third-Party Assemblies The basic principle to sign a thirp-party is to Disassemble the assembly using ildasm.exe and save the intermediate language (IL): BIGBLOCK Rebuild and sign the assembly: BIGBLOCK Fixing Additional References The above steps work fine unless your third-party assembly (A.dll) references another library (B.dll) which also has to be signed. You can disassemble, rebuild and sign both A.dll and B.dll using the commands above, but at runtime, loading of B.dll will fail because A.dll was originally built with a reference to the unsigned version of B.dll. The fix to this issue is to patch the IL file generated in step 1 above. You will need to add the public key token of B.dll to the reference. You get this token by calling BIGBLOCK which will give you the following output: BIGBLOCK The last line contains the public key token. You then have to search the IL of A.dll for the reference to B.dll and add the token as follows: BIGBLOCK ","To avoid this error you could either: Load the assembly dynamically, or Sign the third-party assembly. The basic principle to sign a thirp-party is to Disassemble the assembly using ildasm.exe and save the intermediate language (IL): BIGBLOCK Rebuild and sign the assembly: BIGBLOCK The above steps work fine unless your third-party assembly (A.dll) references another library (B.dll) which also has to be signed. The fix to this issue is to patch the IL file generated in step 1 above. ","To avoid this error you could either: Load the assembly dynamically, or Sign the third-party assembly. Disassemble the assembly using ildasm.exe and save the intermediate language (IL): BIGBLOCK Rebuild and sign the assembly: BIGBLOCK The above steps work fine unless your third-party assembly (A.dll) references another library (B.dll) which also has to be signed. The fix to this issue is to patch the IL file generated in step 1 above. The last line contains the public key token. You then have to search the IL of A.dll for the reference to B.dll and add the token as follows: BIGBLOCK ","To avoid this error you could either: Load the assembly dynamically, or Sign the third-party assembly. You will find instructions on signing third-party assemblies in .NET-fu: Signing an Unsigned Assembly (Without Delay Signing). Disassemble the assembly using ildasm.exe and save the intermediate language (IL): BIGBLOCK Rebuild and sign the assembly: BIGBLOCK Fixing Additional References The above steps work fine unless your third-party assembly (A.dll) references another library (B.dll) which also has to be signed. The fix to this issue is to patch the IL file generated in step 1 above. You will need to add the public key token of B.dll to the reference. BIGBLOCK "
2985169,"So, you have a com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure   java.net.ConnectException: Connection refused I'm quoting from this answer which also contains a step-by-step MySQL+JDBC tutorial: If you get a SQLException: Connection refused or Connection timed out or a MySQL specific , then it means that the DB isn't reachable at all. This can have one or more of the following causes:   IP address or hostname in JDBC URL is wrong.   Hostname in JDBC URL is not recognized by local DNS server.   Port number is missing or wrong in JDBC URL.   DB server is down.   DB server doesn't accept TCP/IP connections.   DB server has run out of connections.   Something in between Java and DB is blocking connections, e.g. a firewall or proxy. To solve the one or the other, follow the following advices:   Verify and test them with ping.   Refresh DNS or use IP address in JDBC URL instead.   Verify it based on my.cnf of MySQL DB.   Start the DB.   Verify if mysqld is started without the --skip-networking option.   Restart the DB and fix your code accordingly that it closes connections in finally.   Disable firewall and/or configure firewall/proxy to allow/forward the port. See also: How should I connect to JDBC database / datasource in a servlet based application? Is it safe to use a static java.sql.Connection instance in a multithreaded system? ",  java.net.ConnectException: Connection refused I'm quoting from this answer which also contains a step-by-step MySQL+JDBC tutorial: ,"So, you have a I'm quoting from this answer which also contains a step-by-step MySQL+JDBC tutorial:   DB server has run out of connections.   Start the DB. ",  java.net.ConnectException: Connection refused I'm quoting from this answer which also contains a step-by-step MySQL+JDBC tutorial: If you get a SQLException: Connection refused or Connection timed out or a MySQL specific   Verify if mysqld is started without the --skip-networking option. See also: 
2965783,"Just read the JavaDoc for the asList method: Returns a {@code List} of the objects   in the specified array. The size of   the {@code List} cannot be modified,   i.e. adding and removing are   unsupported, but the elements can be   set. Setting an element modifies the   underlying array. This is from Java 6 but it looks like it is the same for the android java. EDIT The type of the resulting list is Arrays.ArrayList, which is a private class inside Arrays.class. Practically speaking, it is nothing but a List-view on the array that you've passed with Arrays.asList. With a consequence: if you change the array, the list is changed too. And because an array is not resizeable, remove and add operation must be unsupported. ","Just read the JavaDoc for the asList method: The type of the resulting list is Arrays.ArrayList, which is a private class inside Arrays.class. ","Just read the JavaDoc for the asList method:   unsupported, but the elements can be EDIT And because an array is not resizeable, remove and add operation must be unsupported. ","Just read the JavaDoc for the asList method:   i.e. adding and removing are   unsupported, but the elements can be Setting an element modifies the "
